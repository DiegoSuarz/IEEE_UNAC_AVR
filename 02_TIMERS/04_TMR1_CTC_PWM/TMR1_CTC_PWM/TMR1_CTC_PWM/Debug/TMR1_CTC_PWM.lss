
TMR1_CTC_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006de  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000261  00000000  00000000  00000f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_11>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_12>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Config_TMR1_CTC_PWM>:
	
	
	configurar TMR1 modo CTC
	WGM13 WGM12 WGM11 WGM10 = 0100
		*/
	TCCR1A &= ~(1<<WGM11)&~(1<<WGM10);
  80:	a0 e8       	ldi	r26, 0x80	; 128
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	8c 91       	ld	r24, X
  86:	8c 7f       	andi	r24, 0xFC	; 252
  88:	8c 93       	st	X, r24
	
	TCCR1B |= (1<<WGM12);
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 60       	ori	r24, 0x08	; 8
  92:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
  94:	80 81       	ld	r24, Z
  96:	8f 7e       	andi	r24, 0xEF	; 239
  98:	80 83       	st	Z, r24
	
	//fuente de reloj interno y preescaler 1 (sin preescaler)
	//CS12 CS11 CS10 = 001
	TCCR1B |= (1<<CS10);
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12)& ~(1<<CS11);
  a0:	80 81       	ld	r24, Z
  a2:	89 7f       	andi	r24, 0xF9	; 249
  a4:	80 83       	st	Z, r24
	
	//habilitar las interrupciones por comparacion (los 2 registros OCIE1B,OCIE1A)
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B);
  a6:	ef e6       	ldi	r30, 0x6F	; 111
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	80 83       	st	Z, r24
		-toggle pin OC1A/OC1B				01
		-Clear pin OC1A/OC1B (low level)	10
		-set pin OC1A/OC1B (hihg level)		11
	*/
	//modo toggle en cuando TCNT1 = OCR1A
	TCCR1A &= ~(1<<COM1A1)&~(1<<COM1A0);
  b0:	8c 91       	ld	r24, X
  b2:	8f 73       	andi	r24, 0x3F	; 63
  b4:	8c 93       	st	X, r24
	OCR1A = ((16000000)/(2*1*5000)/2)-1
	OCR1A = 3199
	
	*/
	
	OCR1A = 3199; //controla el periodo del PWM
  b6:	8f e7       	ldi	r24, 0x7F	; 127
  b8:	9c e0       	ldi	r25, 0x0C	; 12
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		10%-> 0.1*3199 = 319.9 = 320
		90%-> 0.9*3199 = 2879.1 = 2879
	*/
	//OCR1B = 1599;  //50% duty cycle
	//OCR1B = 320;  //10% duty cycle
	OCR1B =2879; //90% duty cycle
  c2:	8f e3       	ldi	r24, 0x3F	; 63
  c4:	9b e0       	ldi	r25, 0x0B	; 11
  c6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  ca:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  ce:	08 95       	ret

000000d0 <main>:

void Config_TMR1_CTC_PWM(void);

int main(void)
{
	DDRB |= (1<<PINB5);
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	84 b9       	out	0x04, r24	; 4
    Config_TMR1_CTC_PWM();
  d6:	0e 94 40 00 	call	0x80	; 0x80 <Config_TMR1_CTC_PWM>
	sei();
  da:	78 94       	sei
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0xc>

000000de <__vector_11>:
	//OCR1B = 320;  //10% duty cycle
	OCR1B =2879; //90% duty cycle
	return;
}

ISR(TIMER1_COMPA_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
	PORTB |= (1<<PORTB5); //al iniciar el T PWM on
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	85 b9       	out	0x05, r24	; 5
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_12>:

ISR(TIMER1_COMPB_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
	PORTB &= ~(1<<PORTB5); //al terminar el T Duty cycle off
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
