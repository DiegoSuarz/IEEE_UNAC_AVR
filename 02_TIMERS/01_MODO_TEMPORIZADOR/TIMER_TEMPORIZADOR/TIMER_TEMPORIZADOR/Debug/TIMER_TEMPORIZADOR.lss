
TIMER_TEMPORIZADOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000788  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035b  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001857  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_9>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  78:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Timer1_Init>:
#include <avr/io.h>
#include "Timers_AVR.h"

void Timer1_Init(void){
	//TMR1 en modo normal se usa WGM10=0,WGM11=0,WGM12=0,WGM13=0
	TCCR1A &= ~(1<<WGM11) &~(1<<WGM10); 
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8c 7f       	andi	r24, 0xFC	; 252
  88:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13) &~(1<<WGM12);
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	87 7e       	andi	r24, 0xE7	; 231
  92:	80 83       	st	Z, r24
	
	Valor_100ms = 40536
	*/
	
	//configuracion del preescaler 64: CS10=1, CS11=1 ,CS12=0
	TCCR1B |= (1<<CS11)|(1<<CS10);
  94:	80 81       	ld	r24, Z
  96:	83 60       	ori	r24, 0x03	; 3
  98:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
  9a:	80 81       	ld	r24, Z
  9c:	8b 7f       	andi	r24, 0xFB	; 251
  9e:	80 83       	st	Z, r24
	
	//cargar el valor al temporizador:
	TCNT1 = Valor_100ms;
  a0:	88 e5       	ldi	r24, 0x58	; 88
  a2:	9e e9       	ldi	r25, 0x9E	; 158
  a4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  a8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	//Configurar la interrupción por desbordamiento
	TIMSK1 |= (1<<TOIE1); //habilita interrupción por desobordamiento de TMR1
  ac:	ef e6       	ldi	r30, 0x6F	; 111
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <Timer2_Init>:
}

void Timer2_Init(void){
	
	//timer2 en modo contador
	TCCR2A &= ~(1<<WGM20) & ~(1<<WGM21); //modo temporizador
  b8:	e0 eb       	ldi	r30, 0xB0	; 176
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8c 7f       	andi	r24, 0xFC	; 252
  c0:	80 83       	st	Z, r24
	TCCR2B &= ~(1<<WGM22);
  c2:	e1 eb       	ldi	r30, 0xB1	; 177
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	87 7f       	andi	r24, 0xF7	; 247
  ca:	80 83       	st	Z, r24
	ValorTimer = 178
	

	*/
	//cargar el prescaler 1024
	TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
	
	//cargar el valor:
	TCNT2 = 178;
  d2:	82 eb       	ldi	r24, 0xB2	; 178
  d4:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	//habilitar la interrupción de desbordamiento tmr2
	TIMSK2 |= (1<< TOV2);
  d8:	e0 e7       	ldi	r30, 0x70	; 112
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <main>:
#include "Timers_AVR.h"


int main(void)
{
	 cli();
  e4:	f8 94       	cli
	 Timer1_Init();
  e6:	0e 94 40 00 	call	0x80	; 0x80 <Timer1_Init>
	 Timer2_Init();
  ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <Timer2_Init>
	 DDRC |= (1<<0)|(1<<1);
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	87 b9       	out	0x07, r24	; 7
	 PORTC &= ~(1<<0) & ~(1<<1);
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	8c 7f       	andi	r24, 0xFC	; 252
  f8:	88 b9       	out	0x08, r24	; 8
	 sei();
  fa:	78 94       	sei
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x18>

000000fe <__vector_13>:
    {
		
    }
}

ISR(TIMER1_OVF_vect){ //rutina de servicio de interrupción
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	
	PORTC ^= (1<<PINC0);
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	89 27       	eor	r24, r25
 112:	88 b9       	out	0x08, r24	; 8
	TCNT1 = Valor_100ms; //recargar valor del TIMER1
 114:	88 e5       	ldi	r24, 0x58	; 88
 116:	9e e9       	ldi	r25, 0x9E	; 158
 118:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 11c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	TIFR1 |= (1<<TOV1); //Limpiamos la bandera de interrupción del TIMER1
 120:	86 b3       	in	r24, 0x16	; 22
 122:	81 60       	ori	r24, 0x01	; 1
 124:	86 bb       	out	0x16, r24	; 22
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_9>:

ISR(TIMER2_OVF_vect){ //rutina de servicio de interrupción
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	
	PORTC ^= (1<<PINC1);
 142:	98 b1       	in	r25, 0x08	; 8
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	89 27       	eor	r24, r25
 148:	88 b9       	out	0x08, r24	; 8
	TCNT2 = 178; //recargar valor del TIMER1
 14a:	82 eb       	ldi	r24, 0xB2	; 178
 14c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	TIFR2 |= (1<<TOV2); //Limpiamos la bandera de interrupción del TIMER1
 150:	87 b3       	in	r24, 0x17	; 23
 152:	81 60       	ori	r24, 0x01	; 1
 154:	87 bb       	out	0x17, r24	; 23
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
