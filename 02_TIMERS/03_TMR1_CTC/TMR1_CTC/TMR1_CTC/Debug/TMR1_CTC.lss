
TMR1_CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ae  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021b  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Config_TMR1_CTC>:
    }
}

void Config_TMR1_CTC(void){
	//configurar salida digital el pin 
	DDRB |= (1<<1); //OC1A (Timer/Counter1 output compare match A output) 
  80:	84 b1       	in	r24, 0x04	; 4
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 b9       	out	0x04, r24	; 4
	
	//configurar TMR1 modo CTC
	/*
	WGM13 WGM12 WGM11 WGM10 = 0100
		*/
	TCCR1A &= ~(1<<WGM11)&~(1<<WGM10);
  86:	a0 e8       	ldi	r26, 0x80	; 128
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	8c 91       	ld	r24, X
  8c:	8c 7f       	andi	r24, 0xFC	; 252
  8e:	8c 93       	st	X, r24
	
	TCCR1B |= (1<<WGM12);
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 60       	ori	r24, 0x08	; 8
  98:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
  9a:	80 81       	ld	r24, Z
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	80 83       	st	Z, r24
	
	//fuente de reloj interno y preescaler 256
	//CS12 CS11 CS10 = 100
	TCCR1B &= ~(1<<CS11)& ~(1<<CS10);
  a0:	80 81       	ld	r24, Z
  a2:	8c 7f       	andi	r24, 0xFC	; 252
  a4:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12);
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
		-toggle pin OC1A/OC1B				01
		-Clear pin OC1A/OC1B (low level)	10
		-set pin OC1A/OC1B (hihg level)		11
	*/
	//modo toggle en cuando TCNT1 = OCR1A
	TCCR1A |= (1<<COM1A0);
  ac:	8c 91       	ld	r24, X
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	8c 93       	st	X, r24
	TCCR1A &= ~(1<<COM1A1);
  b2:	8c 91       	ld	r24, X
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	8c 93       	st	X, r24
	OCR1A = ((16000000)/2*256*3)-1
	OCR1A = 10415.66
	OCR1A = 10416
	*/
	
	OCR1A = 10416;
  b8:	80 eb       	ldi	r24, 0xB0	; 176
  ba:	98 e2       	ldi	r25, 0x28	; 40
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  c4:	08 95       	ret

000000c6 <main>:

void Config_TMR1_CTC(void);

int main(void)
{
    Config_TMR1_CTC();
  c6:	0e 94 40 00 	call	0x80	; 0x80 <Config_TMR1_CTC>
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x4>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
