
FAST_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ae  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021b  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Config_FastPWM>:
}

void Config_FastPWM(void){
	
	//configurar timer1 modo FAST PWM de 10 bits  
	TCCR1A |= (1<<WGM10) | (1<<WGM11);
  80:	a0 e8       	ldi	r26, 0x80	; 128
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	8c 91       	ld	r24, X
  86:	83 60       	ori	r24, 0x03	; 3
  88:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12);
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 60       	ori	r24, 0x08	; 8
  92:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
  94:	80 81       	ld	r24, Z
  96:	8f 7e       	andi	r24, 0xEF	; 239
  98:	80 83       	st	Z, r24
	
	//modo de operación FAST PWM (no invertido)
	TCCR1A |= (1<<COM1A1);
  9a:	8c 91       	ld	r24, X
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8c 93       	st	X, r24
	TCCR1A &= ~(1<<COM1B1);
  a0:	8c 91       	ld	r24, X
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	8c 93       	st	X, r24
	
	//seleccionar el prescaler (pree = 8)
	TCCR1B |= (1<<CS11);
  a6:	80 81       	ld	r24, Z
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<CS12)|(1<<CS10));
  ac:	80 81       	ld	r24, Z
  ae:	8a 7f       	andi	r24, 0xFA	; 250
  b0:	80 83       	st	Z, r24
	
	//Configurar el pin de salida asociado al comparado 0C1
	DDRB |= (1<< PINB1); //pb1 salida
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	84 b9       	out	0x04, r24	; 4
	 */
	
	//cargando un valor de duty cycle:
	//OCR1A = 512;	// duty cycle del 50%
	//OCR1A = 307;	// duty cycle del 30%	
	OCR1A = 818;	// duty cycle del80% 0.8*1023=818.4 ->818
  b8:	82 e3       	ldi	r24, 0x32	; 50
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  c4:	08 95       	ret

000000c6 <main>:
void Config_FastPWM(void);


int main(void)
{
    Config_FastPWM();
  c6:	0e 94 40 00 	call	0x80	; 0x80 <Config_FastPWM>
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x4>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
