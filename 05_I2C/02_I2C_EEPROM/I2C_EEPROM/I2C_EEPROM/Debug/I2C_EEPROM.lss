
I2C_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000394  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800112  00800112  0000043a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d41  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000865  00000000  00000000  00001295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068c  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00002188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a0  00000000  00000000  000027df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9e:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:
#include "I2C_AVR.h"

void I2C_Init(void)
{
	//Preescalador
	TWSR &= ~(1<<TWPS0) & ~(1<<TWPS1);
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
	//Bit Rate
	TWBR = (uint8_t)Bit_Rate(); //velocidad de tx 100Khz
  b0:	88 e4       	ldi	r24, 0x48	; 72
  b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b6:	08 95       	ret

000000b8 <I2C_Start>:
}
uint8_t I2C_Start(void)
{
	
	uint8_t status;
	TWCR |= (1<<TWEN) |(1<<TWSTA) |(1<<TWINT);//habilitar i2c, bit de start, habilitar bandera de interrupcion
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 6a       	ori	r24, 0xA4	; 164
  c0:	80 83       	st	Z, r24
	while((TWCR & (1<<TWINT))==0); //esperar hasta que se envie el bit de start
  c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c6:	88 23       	and	r24, r24
  c8:	e4 f7       	brge	.-8      	; 0xc2 <I2C_Start+0xa>
	status = (TWSR & MASCARA_STATUS);
  ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ce:	88 7f       	andi	r24, 0xF8	; 248
	if((status == Condition_start_ok)||(status == Condition_restart_ok)){ //revisar Status Codes for Master Receiver Mode pag 189
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	21 f0       	breq	.+8      	; 0xdc <I2C_Start+0x24>
  d4:	80 31       	cpi	r24, 0x10	; 16
  d6:	19 f4       	brne	.+6      	; 0xde <I2C_Start+0x26>
		
		return 1; //operacion exitosa
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;//hubo un problema
	
}
  de:	08 95       	ret

000000e0 <I2C_Address_Slave>:
uint8_t I2C_Address_Slave(uint8_t address,uint8_t modo)
{
	uint8_t status = 0;
	TWDR = ((address & 0xFE)|(modo & 0x01)); //enviar direccion de esclavo, mas bit de lectura o escritura
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	61 70       	andi	r22, 0x01	; 1
  e4:	68 2b       	or	r22, r24
  e6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //habilitar i2c, habilitar bandera de interrupcion (inicia la transmiscion)
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while((TWCR & (1<<TWINT))==0); //esperar a que se envien los datos a tx
  f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f4:	88 23       	and	r24, r24
  f6:	e4 f7       	brge	.-8      	; 0xf0 <I2C_Address_Slave+0x10>
	
	status = (TWSR & MASCARA_STATUS);
  f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fc:	88 7f       	andi	r24, 0xF8	; 248
	if((status == MASTER_TX_SLAVE_ACK)||(status == MASTER_RX_SLAVE_ACK)){ //revisar Status Codes for Master Receiver Mode pag 189
  fe:	88 31       	cpi	r24, 0x18	; 24
 100:	21 f0       	breq	.+8      	; 0x10a <I2C_Address_Slave+0x2a>
 102:	80 34       	cpi	r24, 0x40	; 64
 104:	19 f4       	brne	.+6      	; 0x10c <I2C_Address_Slave+0x2c>
		
		return 1; //transmision exitosa
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
 10a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;//hubo un problema
	
	
}
 10c:	08 95       	ret

0000010e <I2C_Write_Data>:
uint8_t I2C_Write_Data(uint8_t data)
{
	uint8_t status =0;
	TWDR = data;  //escribimos el dato a transmitir
 10e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //habilitar i2c, habilitar bandera de interrupcion (inicia la transmiscion)
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while((TWCR & (1<<TWINT))==0); //esperar a que se envien los datos a tx
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	88 23       	and	r24, r24
 11e:	e4 f7       	brge	.-8      	; 0x118 <I2C_Write_Data+0xa>
	
	//evalua el estado del bus
	status = (TWSR & MASCARA_STATUS);
 120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 124:	88 7f       	andi	r24, 0xF8	; 248
	if(status == MASTER_TX_DATA_ACK){ //revisar Status Codes for Master Receiver Mode pag 189
 126:	88 32       	cpi	r24, 0x28	; 40
 128:	09 f4       	brne	.+2      	; 0x12c <I2C_Write_Data+0x1e>
		
		return 1; //transmision exitosa
 12a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;//hubo un problema	
	
}
 12c:	08 95       	ret

0000012e <I2C_Read_Data>:

uint8_t I2C_Read_Data(uint8_t *ptr_dato, uint8_t ack_nack){
 12e:	dc 01       	movw	r26, r24
	uint8_t status=0;
	
	if(ack_nack == I2C_ACK)
 130:	61 11       	cpse	r22, r1
 132:	13 c0       	rjmp	.+38     	; 0x15a <I2C_Read_Data+0x2c>
	{
		TWCR |= (1<<TWINT) | (1<<TWEN) | (1<<TWEA); //habilitamos bandera de interrupcion, habilitamos i2c, habilitamos el bit de reconocimiento
 134:	ec eb       	ldi	r30, 0xBC	; 188
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	90 81       	ld	r25, Z
 13a:	94 6c       	ori	r25, 0xC4	; 196
 13c:	90 83       	st	Z, r25
		while((TWCR & (1<<TWINT))==0); //esperar a que se envien los datos a tx
 13e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 142:	99 23       	and	r25, r25
 144:	e4 f7       	brge	.-8      	; 0x13e <I2C_Read_Data+0x10>
		//leer el status
		status = (TWSR & (MASCARA_STATUS)); 
 146:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 14a:	98 7f       	andi	r25, 0xF8	; 248
		
		if(status == MASTER_RX_DATA_ACK) //revisar Status Codes for Master Receiver Mode pag 189
 14c:	90 35       	cpi	r25, 0x50	; 80
 14e:	31 f4       	brne	.+12     	; 0x15c <I2C_Read_Data+0x2e>
		{
			*ptr_dato =  TWDR;  //leo el valor que nos envia el esclavo
 150:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 154:	8c 93       	st	X, r24
			return 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
	return status;//hubo un problema	
	
}

uint8_t I2C_Read_Data(uint8_t *ptr_dato, uint8_t ack_nack){
	uint8_t status=0;
 15a:	90 e0       	ldi	r25, 0x00	; 0
			return 1;
		}
		
	}
	
	if(ack_nack == I2C_NACK)
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	b1 f4       	brne	.+44     	; 0x18c <I2C_Read_Data+0x5e>
	{
		TWCR |= (1<<TWINT) |(1<<TWEN); 
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	84 68       	ori	r24, 0x84	; 132
 168:	80 83       	st	Z, r24
		TWCR &= ~(1<<TWEA);		//Generamos el bit de NO reconocimiento (NACK)
 16a:	90 81       	ld	r25, Z
 16c:	9f 7b       	andi	r25, 0xBF	; 191
 16e:	90 83       	st	Z, r25
		while((TWCR & (1<<TWINT))==0); //esperar a que se envien los datos a tx
 170:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 174:	99 23       	and	r25, r25
 176:	e4 f7       	brge	.-8      	; 0x170 <I2C_Read_Data+0x42>
		//leer el status
		status = (TWSR & (MASCARA_STATUS));
 178:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17c:	98 7f       	andi	r25, 0xF8	; 248
		
		if(status == MASTER_RX_DATA_NACK) //revisar Status Codes for Master Receiver Mode pag 189
 17e:	98 35       	cpi	r25, 0x58	; 88
 180:	39 f4       	brne	.+14     	; 0x190 <I2C_Read_Data+0x62>
		{
			*ptr_dato =  TWDR;  //leo el valor que nos envia el esclavo
 182:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 186:	8c 93       	st	X, r24
			return 2;
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	08 95       	ret
 18c:	89 2f       	mov	r24, r25
 18e:	08 95       	ret
	{
		TWCR |= (1<<TWINT) |(1<<TWEN); 
		TWCR &= ~(1<<TWEA);		//Generamos el bit de NO reconocimiento (NACK)
		while((TWCR & (1<<TWINT))==0); //esperar a que se envien los datos a tx
		//leer el status
		status = (TWSR & (MASCARA_STATUS));
 190:	89 2f       	mov	r24, r25
			*ptr_dato =  TWDR;  //leo el valor que nos envia el esclavo
			return 2;
		}
	}
	return status;	
}
 192:	08 95       	ret

00000194 <I2C_Stop>:

void I2C_Stop(void)
{
	TWCR |= (1<<TWEN) |(1<<TWSTO) |(1<<TWINT);//habilitar i2c, bit de stop, habilitar bandera de interrupcion
 194:	ec eb       	ldi	r30, 0xBC	; 188
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	84 69       	ori	r24, 0x94	; 148
 19c:	80 83       	st	Z, r24
	while((TWCR & (1<<TWSTO))==1); //esperar hasta que se complete el bit de stop
 19e:	80 81       	ld	r24, Z
 1a0:	08 95       	ret

000001a2 <USART0_Init>:
 * Created: 7/06/2022 15:16:23
 *  Author: Diego
 */ 
#include "USART_AVR.h"

void USART0_Init(uint32_t BaudRate){
 1a2:	9b 01       	movw	r18, r22
 1a4:	ac 01       	movw	r20, r24
	//Configuramos los baudios
	UBRR0 = (uint16_t)((F_CPU/8UL/BaudRate)-1);
 1a6:	60 e8       	ldi	r22, 0x80	; 128
 1a8:	74 e8       	ldi	r23, 0x84	; 132
 1aa:	8e e1       	ldi	r24, 0x1E	; 30
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 a6 01 	call	0x34c	; 0x34c <__udivmodsi4>
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	31 09       	sbc	r19, r1
 1b6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1ba:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Configuramos UART0 doble speed mode
	UCSR0A |= (1<<U2X0);
 1be:	e0 ec       	ldi	r30, 0xC0	; 192
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	80 83       	st	Z, r24
	
	//Configuramos 8 bits de datos para tx y rx:
	UCSR0B &= ~(1<<UCSZ02);
 1c8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	8b 7f       	andi	r24, 0xFB	; 251
 1d0:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 1d2:	a2 ec       	ldi	r26, 0xC2	; 194
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	8c 91       	ld	r24, X
 1d8:	86 60       	ori	r24, 0x06	; 6
 1da:	8c 93       	st	X, r24
	
	//Configuramos el modo Asincrono
	UCSR0C &= ~(1<<UMSEL01) & ~(1<<UMSEL00);
 1dc:	8c 91       	ld	r24, X
 1de:	8f 73       	andi	r24, 0x3F	; 63
 1e0:	8c 93       	st	X, r24
	
	//Configuramos el bit de paridad por hardware
	UCSR0C &= ~(1<<UPM01) & ~(1<<UPM00); //desactivamos el bit de paridad
 1e2:	8c 91       	ld	r24, X
 1e4:	8f 7c       	andi	r24, 0xCF	; 207
 1e6:	8c 93       	st	X, r24
	
	//Configuramos el bit de stop
	UCSR0C &= ~(1<<USBS0); //solo 1 bit de stop
 1e8:	8c 91       	ld	r24, X
 1ea:	87 7f       	andi	r24, 0xF7	; 247
 1ec:	8c 93       	st	X, r24

	//habilitar tx UART
	UCSR0B |= (1<<TXEN0);
 1ee:	80 81       	ld	r24, Z
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	80 83       	st	Z, r24
	
	//habilitar rx UART
	UCSR0B |= (1<<RXEN0);
 1f4:	80 81       	ld	r24, Z
 1f6:	80 61       	ori	r24, 0x10	; 16
 1f8:	80 83       	st	Z, r24
	
	//habilitar interrupcion por rx
	UCSR0B |= (1<<RXCIE0);
 1fa:	80 81       	ld	r24, Z
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	80 83       	st	Z, r24
 200:	08 95       	ret

00000202 <USART0_PrintChar>:
}
void USART0_PrintChar(char C){
	while((UCSR0A & (1<<UDRE0))==0);
 202:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 206:	95 ff       	sbrs	r25, 5
 208:	fc cf       	rjmp	.-8      	; 0x202 <USART0_PrintChar>
	UDR0 = C;
 20a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 20e:	08 95       	ret

00000210 <USART0_PrintString>:
	
}
void USART0_PrintString(char *C){
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
	char *ptr_c;
	ptr_c = C;
	
	while(*ptr_c){
 216:	03 c0       	rjmp	.+6      	; 0x21e <USART0_PrintString+0xe>
		USART0_PrintChar(*ptr_c++);
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	0e 94 01 01 	call	0x202	; 0x202 <USART0_PrintChar>
}
void USART0_PrintString(char *C){
	char *ptr_c;
	ptr_c = C;
	
	while(*ptr_c){
 21e:	88 81       	ld	r24, Y
 220:	81 11       	cpse	r24, r1
 222:	fa cf       	rjmp	.-12     	; 0x218 <USART0_PrintString+0x8>
		USART0_PrintChar(*ptr_c++);
	}
	
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <Write_EEPROM_I2C>:
		
    }
}

void Write_EEPROM_I2C(char *ptr_Str, uint16_t ADD_EEPROM)
{
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
 232:	16 2f       	mov	r17, r22
 234:	87 2f       	mov	r24, r23
	I2C_Write_Data((uint8_t)(ADD_EEPROM>>8)); //enviar la direccion la parte alta (son 16 bits)
 236:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>
	I2C_Write_Data((uint8_t)(ADD_EEPROM)); //enviar la direecion la parte baja
 23a:	81 2f       	mov	r24, r17
 23c:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>
	while(*ptr_Str)
 240:	03 c0       	rjmp	.+6      	; 0x248 <Write_EEPROM_I2C+0x1e>
		I2C_Write_Data(*ptr_Str++); //enviar letra por letra hasta que encuentre el caracter nulo '\0'
 242:	21 96       	adiw	r28, 0x01	; 1
 244:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>

void Write_EEPROM_I2C(char *ptr_Str, uint16_t ADD_EEPROM)
{
	I2C_Write_Data((uint8_t)(ADD_EEPROM>>8)); //enviar la direccion la parte alta (son 16 bits)
	I2C_Write_Data((uint8_t)(ADD_EEPROM)); //enviar la direecion la parte baja
	while(*ptr_Str)
 248:	88 81       	ld	r24, Y
 24a:	81 11       	cpse	r24, r1
 24c:	fa cf       	rjmp	.-12     	; 0x242 <Write_EEPROM_I2C+0x18>
		I2C_Write_Data(*ptr_Str++); //enviar letra por letra hasta que encuentre el caracter nulo '\0'
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	08 95       	ret

00000256 <Read_EEPROM_I2C>:

void Read_EEPROM_I2C(uint8_t address, char *ptr_Str,uint16_t Nbytes, uint16_t ADD_EEPROM)
{
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	1f 92       	push	r1
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	d8 2e       	mov	r13, r24
 26e:	7b 01       	movw	r14, r22
 270:	8a 01       	movw	r16, r20
 272:	c2 2e       	mov	r12, r18
 274:	83 2f       	mov	r24, r19
	uint8_t dato_leido;
	I2C_Write_Data((uint8_t)(ADD_EEPROM>>8)); //enviar la direccion la parte alta (son 16 bits)
 276:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>
	I2C_Write_Data((uint8_t)(ADD_EEPROM)); //enviar la direecion la parte baja
 27a:	8c 2d       	mov	r24, r12
 27c:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>
	I2C_Start(); //restart, enviamos nuevamente el bit de start para proceder hacer la lectura
 280:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
	I2C_Address_Slave(address,I2C_READ); //i2c modo lectura
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	8d 2d       	mov	r24, r13
 288:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Address_Slave>
	 while(Nbytes>1){
 28c:	0b c0       	rjmp	.+22     	; 0x2a4 <Read_EEPROM_I2C+0x4e>
		 I2C_Read_Data(&dato_leido,I2C_ACK); //los datos enviados por la memoria se almacenan desde el puntero dato leido, enviamos bit ACK
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	0e 94 97 00 	call	0x12e	; 0x12e <I2C_Read_Data>
		 *ptr_Str = dato_leido;
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	f7 01       	movw	r30, r14
 29c:	81 93       	st	Z+, r24
 29e:	7f 01       	movw	r14, r30
		 ptr_Str++; //aumentamos el valor del puntero
		 Nbytes--;
 2a0:	01 50       	subi	r16, 0x01	; 1
 2a2:	11 09       	sbc	r17, r1
	uint8_t dato_leido;
	I2C_Write_Data((uint8_t)(ADD_EEPROM>>8)); //enviar la direccion la parte alta (son 16 bits)
	I2C_Write_Data((uint8_t)(ADD_EEPROM)); //enviar la direecion la parte baja
	I2C_Start(); //restart, enviamos nuevamente el bit de start para proceder hacer la lectura
	I2C_Address_Slave(address,I2C_READ); //i2c modo lectura
	 while(Nbytes>1){
 2a4:	02 30       	cpi	r16, 0x02	; 2
 2a6:	11 05       	cpc	r17, r1
 2a8:	90 f7       	brcc	.-28     	; 0x28e <Read_EEPROM_I2C+0x38>
		 *ptr_Str = dato_leido;
		 ptr_Str++; //aumentamos el valor del puntero
		 Nbytes--;
	 }
	 //leemos el ultimo byte
	 I2C_Read_Data(&dato_leido,I2C_NACK); //leemos el ultimo dato, enviamos el bit NACK
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 97 00 	call	0x12e	; 0x12e <I2C_Read_Data>
	 *ptr_Str = dato_leido;	 
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	f7 01       	movw	r30, r14
 2b8:	80 83       	st	Z, r24
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	08 95       	ret

000002ce <main>:
void Write_EEPROM_I2C(char *ptr_Str, uint16_t ADD_EEPROM);
void Read_EEPROM_I2C(uint8_t address,char *ptr_Str,uint16_t Nbytes, uint16_t ADD_EEPROM);

int main(void)
{
	USART0_Init(9600);
 2ce:	60 e8       	ldi	r22, 0x80	; 128
 2d0:	75 e2       	ldi	r23, 0x25	; 37
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <USART0_Init>
    I2C_Init();
 2da:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
    I2C_Start();
 2de:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
	I2C_Address_Slave(EEPROM1,I2C_WRITE);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	86 ea       	ldi	r24, 0xA6	; 166
 2e6:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Address_Slave>
	Write_EEPROM_I2C(Str_1,0x0028); //escribir en la posicion de memoria 0x0028 la cadena str_1
 2ea:	68 e2       	ldi	r22, 0x28	; 40
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 15 01 	call	0x22a	; 0x22a <Write_EEPROM_I2C>
	I2C_Stop();
 2f6:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	8f e1       	ldi	r24, 0x1F	; 31
 2fc:	9e e4       	ldi	r25, 0x4E	; 78
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <main+0x30>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x36>
 304:	00 00       	nop
	_delay_ms(5);
	
	
	//Lectura
	I2C_Start();
 306:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
	I2C_Address_Slave(EEPROM1,I2C_WRITE);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	86 ea       	ldi	r24, 0xA6	; 166
 30e:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Address_Slave>
	Read_EEPROM_I2C(EEPROM1,ReadString,strlen(Str_1),0x028); //strlen permite obtener la longitud de la cadena
 312:	e0 e0       	ldi	r30, 0x00	; 0
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	01 90       	ld	r0, Z+
 318:	00 20       	and	r0, r0
 31a:	e9 f7       	brne	.-6      	; 0x316 <main+0x48>
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	af 01       	movw	r20, r30
 320:	40 50       	subi	r20, 0x00	; 0
 322:	51 40       	sbci	r21, 0x01	; 1
 324:	28 e2       	ldi	r18, 0x28	; 40
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	64 e1       	ldi	r22, 0x14	; 20
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	86 ea       	ldi	r24, 0xA6	; 166
 32e:	0e 94 2b 01 	call	0x256	; 0x256 <Read_EEPROM_I2C>
	I2C_Stop();
 332:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Stop>
 336:	8f e1       	ldi	r24, 0x1F	; 31
 338:	9e e4       	ldi	r25, 0x4E	; 78
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0x6c>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0x72>
 340:	00 00       	nop
	
	_delay_ms(5);
	
	USART0_PrintString(ReadString);
 342:	84 e1       	ldi	r24, 0x14	; 20
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 08 01 	call	0x210	; 0x210 <USART0_PrintString>
 34a:	ff cf       	rjmp	.-2      	; 0x34a <main+0x7c>

0000034c <__udivmodsi4>:
 34c:	a1 e2       	ldi	r26, 0x21	; 33
 34e:	1a 2e       	mov	r1, r26
 350:	aa 1b       	sub	r26, r26
 352:	bb 1b       	sub	r27, r27
 354:	fd 01       	movw	r30, r26
 356:	0d c0       	rjmp	.+26     	; 0x372 <__udivmodsi4_ep>

00000358 <__udivmodsi4_loop>:
 358:	aa 1f       	adc	r26, r26
 35a:	bb 1f       	adc	r27, r27
 35c:	ee 1f       	adc	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	a2 17       	cp	r26, r18
 362:	b3 07       	cpc	r27, r19
 364:	e4 07       	cpc	r30, r20
 366:	f5 07       	cpc	r31, r21
 368:	20 f0       	brcs	.+8      	; 0x372 <__udivmodsi4_ep>
 36a:	a2 1b       	sub	r26, r18
 36c:	b3 0b       	sbc	r27, r19
 36e:	e4 0b       	sbc	r30, r20
 370:	f5 0b       	sbc	r31, r21

00000372 <__udivmodsi4_ep>:
 372:	66 1f       	adc	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	88 1f       	adc	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	1a 94       	dec	r1
 37c:	69 f7       	brne	.-38     	; 0x358 <__udivmodsi4_loop>
 37e:	60 95       	com	r22
 380:	70 95       	com	r23
 382:	80 95       	com	r24
 384:	90 95       	com	r25
 386:	9b 01       	movw	r18, r22
 388:	ac 01       	movw	r20, r24
 38a:	bd 01       	movw	r22, r26
 38c:	cf 01       	movw	r24, r30
 38e:	08 95       	ret

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
