
PCF8574.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000988  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000746  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049f  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011e  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9e:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:
#include "I2C_AVR.h"

void I2C_Init(void)
{
	//Preescalador
	TWSR &= ~(1<<TWPS0) & ~(1<<TWPS1);
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
	//Bit Rate
	TWBR = (uint8_t)Bit_Rate(); //velocidad de tx 100Khz
  b0:	88 e4       	ldi	r24, 0x48	; 72
  b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b6:	08 95       	ret

000000b8 <I2C_Start>:
}
uint8_t I2C_Start(void)
{
	
	uint8_t status;
	TWCR |= (1<<TWEN) |(1<<TWSTA) |(1<<TWINT);//habilitar i2c, bit de start, habilitar bandera de interrupcion
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 6a       	ori	r24, 0xA4	; 164
  c0:	80 83       	st	Z, r24
	while((TWCR & (1<<TWINT))==0); //esperar hasta que se envie el bit de start
  c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c6:	88 23       	and	r24, r24
  c8:	e4 f7       	brge	.-8      	; 0xc2 <I2C_Start+0xa>
	status = (TWSR & MASCARA_STATUS);
  ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ce:	88 7f       	andi	r24, 0xF8	; 248
	if((status == Condition_start_ok)||(status == Condition_restart_ok)){ //revisar Status Codes for Master Receiver Mode pag 189
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	21 f0       	breq	.+8      	; 0xdc <I2C_Start+0x24>
  d4:	80 31       	cpi	r24, 0x10	; 16
  d6:	19 f4       	brne	.+6      	; 0xde <I2C_Start+0x26>
		
		return 1; //operacion exitosa
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;//hubo un problema
	
}
  de:	08 95       	ret

000000e0 <I2C_Address_Slave>:
uint8_t I2C_Address_Slave(uint8_t address,uint8_t modo)
{
	uint8_t status = 0;
	TWDR = ((address & 0xFE)|(modo & 0x01)); //enviar direccion de esclavo, mas bit de lectura o escritura
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	61 70       	andi	r22, 0x01	; 1
  e4:	68 2b       	or	r22, r24
  e6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //habilitar i2c, habilitar bandera de interrupcion (inicia la transmiscion)
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while((TWCR & (1<<TWINT))==0); //esperar a que se envien los datos a tx
  f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f4:	88 23       	and	r24, r24
  f6:	e4 f7       	brge	.-8      	; 0xf0 <I2C_Address_Slave+0x10>
	
	status = (TWSR & MASCARA_STATUS);
  f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fc:	88 7f       	andi	r24, 0xF8	; 248
	if((status == MASTER_TX_SLAVE_ACK)||(status == MASTER_RX_SLAVE_ACK)){ //revisar Status Codes for Master Receiver Mode pag 189
  fe:	88 31       	cpi	r24, 0x18	; 24
 100:	21 f0       	breq	.+8      	; 0x10a <I2C_Address_Slave+0x2a>
 102:	80 34       	cpi	r24, 0x40	; 64
 104:	19 f4       	brne	.+6      	; 0x10c <I2C_Address_Slave+0x2c>
		
		return 1; //transmision exitosa
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
 10a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;//hubo un problema
	
	
}
 10c:	08 95       	ret

0000010e <I2C_Write_Data>:
uint8_t I2C_Write_Data(uint8_t data)
{
	uint8_t status =0;
	TWDR = data;  //escribimos el dato a transmitir
 10e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //habilitar i2c, habilitar bandera de interrupcion (inicia la transmiscion)
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while((TWCR & (1<<TWINT))==0); //esperar a que se envien los datos a tx
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	88 23       	and	r24, r24
 11e:	e4 f7       	brge	.-8      	; 0x118 <I2C_Write_Data+0xa>
	
	//evalua el estado del bus
	status = (TWSR & MASCARA_STATUS);
 120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 124:	88 7f       	andi	r24, 0xF8	; 248
	if(status == MASTER_TX_DATA_ACK){ //revisar Status Codes for Master Receiver Mode pag 189
 126:	88 32       	cpi	r24, 0x28	; 40
 128:	09 f4       	brne	.+2      	; 0x12c <I2C_Write_Data+0x1e>
		
		return 1; //transmision exitosa
 12a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;//hubo un problema	
	
}
 12c:	08 95       	ret

0000012e <I2C_Stop>:

uint8_t I2C_Read_Data(uint8_t *ptr_dato, uint8_t ack_nack);

void I2C_Stop(void)
{
	TWCR |= (1<<TWEN) |(1<<TWSTO) |(1<<TWINT);//habilitar i2c, bit de stop, habilitar bandera de interrupcion
 12e:	ec eb       	ldi	r30, 0xBC	; 188
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 69       	ori	r24, 0x94	; 148
 136:	80 83       	st	Z, r24
	while((TWCR & (1<<TWSTO))==1); //esperar hasta que se complete el bit de stop
 138:	80 81       	ld	r24, Z
 13a:	08 95       	ret

0000013c <main>:

uint8_t Display_7Seg_A[10] = {0XC0,0XF9,0XA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90};
	
int main(void)
{
	I2C_Init();
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
	while (1)
	{
		for(centenas=0;centenas<10;centenas++)
 140:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <centenas>
 144:	52 c0       	rjmp	.+164    	; 0x1ea <main+0xae>
		{
			I2C_Start();
 146:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
			I2C_Address_Slave(ADDS_PCF3,I2C_WRITE);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	86 e4       	ldi	r24, 0x46	; 70
 14e:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Address_Slave>
			I2C_Write_Data(Display_7Seg_A[centenas]);
 152:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <centenas>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>
			for(decenas=0;decenas<10;decenas++)
 162:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 166:	36 c0       	rjmp	.+108    	; 0x1d4 <main+0x98>
			{
				I2C_Start();
 168:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
				I2C_Address_Slave(ADDS_PCF2,I2C_WRITE);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	8c e4       	ldi	r24, 0x4C	; 76
 170:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Address_Slave>
				I2C_Write_Data(Display_7Seg_A[decenas]);
 174:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e0 50       	subi	r30, 0x00	; 0
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 81       	ld	r24, Z
 180:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>
				for(unidades=0;unidades<10;unidades++)
 184:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <unidades>
 188:	1c c0       	rjmp	.+56     	; 0x1c2 <main+0x86>
				{
					I2C_Start();
 18a:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
					I2C_Address_Slave(ADDS_PCF1,I2C_WRITE);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Address_Slave>
					I2C_Write_Data(Display_7Seg_A[unidades]);
 196:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <unidades>
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	e0 50       	subi	r30, 0x00	; 0
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	80 81       	ld	r24, Z
 1a2:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	80 e7       	ldi	r24, 0x70	; 112
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x70>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x7a>
 1b6:	00 00       	nop
			for(decenas=0;decenas<10;decenas++)
			{
				I2C_Start();
				I2C_Address_Slave(ADDS_PCF2,I2C_WRITE);
				I2C_Write_Data(Display_7Seg_A[decenas]);
				for(unidades=0;unidades<10;unidades++)
 1b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <unidades>
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <unidades>
 1c2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <unidades>
 1c6:	8a 30       	cpi	r24, 0x0A	; 10
 1c8:	00 f3       	brcs	.-64     	; 0x18a <main+0x4e>
		for(centenas=0;centenas<10;centenas++)
		{
			I2C_Start();
			I2C_Address_Slave(ADDS_PCF3,I2C_WRITE);
			I2C_Write_Data(Display_7Seg_A[centenas]);
			for(decenas=0;decenas<10;decenas++)
 1ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1d8:	8a 30       	cpi	r24, 0x0A	; 10
 1da:	30 f2       	brcs	.-116    	; 0x168 <main+0x2c>
					I2C_Address_Slave(ADDS_PCF1,I2C_WRITE);
					I2C_Write_Data(Display_7Seg_A[unidades]);
					_delay_ms(50);
				}
			}
			I2C_Stop();
 1dc:	0e 94 97 00 	call	0x12e	; 0x12e <I2C_Stop>
int main(void)
{
	I2C_Init();
	while (1)
	{
		for(centenas=0;centenas<10;centenas++)
 1e0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <centenas>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <centenas>
 1ea:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <centenas>
 1ee:	8a 30       	cpi	r24, 0x0A	; 10
 1f0:	08 f4       	brcc	.+2      	; 0x1f4 <main+0xb8>
 1f2:	a9 cf       	rjmp	.-174    	; 0x146 <main+0xa>
 1f4:	a5 cf       	rjmp	.-182    	; 0x140 <main+0x4>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
