
I2C_LIBRERIA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003c2  00800100  0000018e  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008004c2  008004c2  000005e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000972  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000769  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000456  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013d  00000000  00000000  000020be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000021fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3c       	cpi	r26, 0xC2	; 194
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a2 ec       	ldi	r26, 0xC2	; 194
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3c       	cpi	r26, 0xC4	; 196
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:
#include "I2C_AVR.h"

void I2C_Init(void)
{
	//Preescalador
	TWSR &= ~(1<<TWPS0) & ~(1<<TWPS1);
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
	//Bit Rate
	TWBR = (uint8_t)Bit_Rate(); //velocidad de tx 100Khz
  b0:	88 e4       	ldi	r24, 0x48	; 72
  b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b6:	08 95       	ret

000000b8 <I2C_Start>:
}
uint8_t I2C_Start(void)
{
	
	uint8_t status;
	TWCR |= (1<<TWEN) |(1<<TWSTA) |(1<<TWINT);//habilitar i2c, bit de start, habilitar bandera de interrupcion
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 6a       	ori	r24, 0xA4	; 164
  c0:	80 83       	st	Z, r24
	while((TWCR & (1<<TWINT))==0); //esperar hasta que se envie el bit de start
  c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c6:	88 23       	and	r24, r24
  c8:	e4 f7       	brge	.-8      	; 0xc2 <I2C_Start+0xa>
	status = (TWSR & MASCARA_STATUS);
  ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ce:	88 7f       	andi	r24, 0xF8	; 248
	if((status == Condition_start_ok)||(status == Condition_restart_ok)){ //revisar Status Codes for Master Receiver Mode pag 189
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	21 f0       	breq	.+8      	; 0xdc <I2C_Start+0x24>
  d4:	80 31       	cpi	r24, 0x10	; 16
  d6:	19 f4       	brne	.+6      	; 0xde <I2C_Start+0x26>
		
		return 1; //operacion exitosa
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;//hubo un problema
	
}
  de:	08 95       	ret

000000e0 <I2C_Address_Slave>:
uint8_t I2C_Address_Slave(uint8_t address,uint8_t modo)
{
	uint8_t status = 0;
	TWDR = ((address & 0xFE)|(modo & 0x01)); //enviar direccion de esclavo, mas bit de lectura o escritura
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	61 70       	andi	r22, 0x01	; 1
  e4:	68 2b       	or	r22, r24
  e6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //habilitar i2c, habilitar bandera de interrupcion (inicia la transmiscion)
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while((TWCR & (1<<TWINT))==0); //esperar a que se envien los datos a tx
  f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f4:	88 23       	and	r24, r24
  f6:	e4 f7       	brge	.-8      	; 0xf0 <I2C_Address_Slave+0x10>
	
	status = (TWSR & MASCARA_STATUS);
  f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fc:	88 7f       	andi	r24, 0xF8	; 248
	if((status == MASTER_TX_SLAVE_ACK)||(status == MASTER_RX_SLAVE_ACK)){ //revisar Status Codes for Master Receiver Mode pag 189
  fe:	88 31       	cpi	r24, 0x18	; 24
 100:	21 f0       	breq	.+8      	; 0x10a <I2C_Address_Slave+0x2a>
 102:	80 34       	cpi	r24, 0x40	; 64
 104:	19 f4       	brne	.+6      	; 0x10c <I2C_Address_Slave+0x2c>
		
		return 1; //transmision exitosa
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
 10a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;//hubo un problema
	
	
}
 10c:	08 95       	ret

0000010e <I2C_Write_Data>:
uint8_t I2C_Write_Data(uint8_t data)
{
	uint8_t status =0;
	TWDR = data;  //escribimos el dato a transmitir
 10e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //habilitar i2c, habilitar bandera de interrupcion (inicia la transmiscion)
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while((TWCR & (1<<TWINT))==0); //esperar a que se envien los datos a tx
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	88 23       	and	r24, r24
 11e:	e4 f7       	brge	.-8      	; 0x118 <I2C_Write_Data+0xa>
	
	//evalua el estado del bus
	status = (TWSR & MASCARA_STATUS);
 120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 124:	88 7f       	andi	r24, 0xF8	; 248
	if(status == MASTER_TX_DATA_ACK){ //revisar Status Codes for Master Receiver Mode pag 189
 126:	88 32       	cpi	r24, 0x28	; 40
 128:	09 f4       	brne	.+2      	; 0x12c <I2C_Write_Data+0x1e>
		
		return 1; //transmision exitosa
 12a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;//hubo un problema	
	
}
 12c:	08 95       	ret

0000012e <I2C_Stop>:

uint8_t I2C_Read_Data(uint8_t *ptr_dato, uint8_t ack_nack);

void I2C_Stop(void)
{
	TWCR |= (1<<TWEN) |(1<<TWSTO) |(1<<TWINT);//habilitar i2c, bit de stop, habilitar bandera de interrupcion
 12e:	ec eb       	ldi	r30, 0xBC	; 188
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 69       	ori	r24, 0x94	; 148
 136:	80 83       	st	Z, r24
	while((TWCR & (1<<TWSTO))==1); //esperar hasta que se complete el bit de stop
 138:	80 81       	ld	r24, Z
 13a:	08 95       	ret

0000013c <main>:
uint16_t dato_sine[481] ={2101,2295,2052,2246,2440,2197,2390,2584,2340,2533,2725,2481,2672,2864,2618,2809,2999,2752,2941,3129,2880,3067,3254,3003,3188,3372,3119,3302,3484,3228,3409,3588,3330,3507,3684,3422,3597,3770,3506,3678,3848,3580,3749,3916,3645,3809,3973,3698,3860,4019,3741,3899,4055,3774,3927,4080,3794,3944,4093,3804,3950,4095,3802,3944,4086,3789,3927,4065,3764,3899,4033,3728,3860,3990,3682,3809,3936,3624,3749,3872,3557,3678,3797,3479,3597,3714,3392,3507,3621,3297,3409,3519,3193,3302,3410,3081,3188,3294,2963,3067,3171,2838,2941,3043,2708,2809,2909,2573,2672,2772,2434,2533,2631,2292,2390,2488,2149,2246,2343,2004,2101,2198,1859,1956,2053,1714,1812,1910,1571,1669,1768,1430,1530,1629,1293,1394,1495,1160,1262,1364,1031,1135,1240,908,1014,1121,792,900,1009,683,794,905,581,695,810,489,605,723,405,525,645,331,454,578,266,393,521,213,343,474,170,303,438,138,275,414,117,258,400,107,252,398,109,258,408,122,275,429,147,303,461,183,343,504,229,393,558,287,454,622,354,525,696,432,605,780,519,695,873,614,794,974,718,900,1083,830,1014,1199,949,1135,1322,1073,1262,1451,1203,1394,1584,1338,1530,1722,1477,1669,1862,1619,1812,2005,1762,1956,2150,1907,2101,2295,2052,2246,2440,2197,2390,2584,2340,2533,2725,2481,2672,2864,2618,2809,2999,2752,2941,3129,2880,3067,3254,3003,3188,3372,3119,3302,3484,3228,3409,3588,3330,3507,3684,3422,3597,3770,3506,3678,3848,3580,3749,3916,3645,3809,3973,3698,3860,4019,3741,3899,4055,3774,3927,4080,3794,3944,4093,3804,3950,4095,3802,3944,4086,3789,3927,4065,3764,3899,4033,3728,3860,3990,3682,3809,3936,3624,3749,3872,3557,3678,3797,3479,3597,3714,3392,3507,3621,3297,3409,3519,3193,3302,3410,3081,3188,3294,2963,3067,3171,2838,2941,3043,2708,2809,2909,2573,2672,2772,2434,2533,2631,2292,2390,2488,2149,2246,2343,2004,2101,2198,1859,1956,2053,1714,1812,1910,1571,1669,1768,1430,1530,1629,1293,1394,1495,1160,1262,1364,1031,1135,1240,908,1014,1121,792,900,1009,683,794,905,581,695,810,489,605,723,405,525,645,331,454,578,266,393,521,213,343,474,170,303,438,138,275,414,117,258,400,107,252,398,109,258,408,122,275,429,147,303,461,183,343,504,229,393,558,287,454,622,354,525,696,432,605,780,519,695,873,614,794,974,718,900,1083,830,1014,1199,949,1135,1322,1073,1262,1451,1203,1394,1584,1338,1530,1722,1477,1669,1862,1619,1812,2005,1762,1956,2150,1907,2101};
uint16_t dato[5]={2101,2295,2052,2246,2440};
uint8_t Val_H=0,Val_L =0;
int main(void)
{
    I2C_Init();
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
    while (1) 
    {
		for(uint8_t i=0;i<481;i++)
 140:	c0 e0       	ldi	r28, 0x00	; 0
		{
			Val_H = dato_sine[i]>>8;
 142:	ec 2f       	mov	r30, r28
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	80 81       	ld	r24, Z
 150:	91 81       	ldd	r25, Z+1	; 0x01
 152:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <Val_H>
			Val_L = dato_sine[i];
 156:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <__data_end>
			I2C_Start();
 15a:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Start>
			I2C_Address_Slave(0b11000000,I2C_WRITE);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	80 ec       	ldi	r24, 0xC0	; 192
 162:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Address_Slave>
			I2C_Write_Data(Val_H);
 166:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Val_H>
 16a:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>
			I2C_Write_Data(Val_L);
 16e:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <__data_end>
 172:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write_Data>
			I2C_Stop();
 176:	0e 94 97 00 	call	0x12e	; 0x12e <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f e1       	ldi	r24, 0x1F	; 31
 17c:	9e e4       	ldi	r25, 0x4E	; 78
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x42>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x48>
 184:	00 00       	nop
int main(void)
{
    I2C_Init();
    while (1) 
    {
		for(uint8_t i=0;i<481;i++)
 186:	cf 5f       	subi	r28, 0xFF	; 255
 188:	dc cf       	rjmp	.-72     	; 0x142 <main+0x6>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
