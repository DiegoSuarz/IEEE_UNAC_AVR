
spi interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000c1e  00000cb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800118  00800118  00000cca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001afd  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a02  00000000  00000000  0000295d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9d  00000000  00000000  0000335f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  000040fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da7  00000000  00000000  0000464c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000053f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  9e:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
	
} 


void ADC_Enable(void){
	ADCSRA |= (1<<ADEN); //habilitamos el periferico adc
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	80 83       	st	Z, r24
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	80 83       	st	Z, r24
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  cc:	08 95       	ret

000000ce <ADC_Disable>:
	
	
}	
void ADC_Disable(void){
	ADCSRA &= ~(1<<ADEN);  //deshabilitamos el periferico adc
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8f 77       	andi	r24, 0x7F	; 127
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <ADC_AnalogRead>:
}

uint16_t ADC_AnalogRead(Channel ANx){
	
	//Seleccionamos el canal del ADC
	ADMUX = ((ADMUX & 0xF0)|(ANx & 0x0F));
  da:	ec e7       	ldi	r30, 0x7C	; 124
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	90 7f       	andi	r25, 0xF0	; 240
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
	
	//habilitamos el periferico adc
	ADCSRA |= (1<<ADEN); 
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
	
	//Iniciar Conversion
	ADCSRA |= (1<<ADSC);
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
	
	//Esperar que la conversion termine
	while(((ADCSRA &(1<<ADSC)))!=0);
  f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fc:	86 fd       	sbrc	r24, 6
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <ADC_AnalogRead+0x1e>
	
	//deshabilitamos el ADC
	ADC_Disable();
 100:	0e 94 67 00 	call	0xce	; 0xce <ADC_Disable>
	
	return (ADC);
 104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 108:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 10c:	08 95       	ret

0000010e <LCD_AVR_Data_Bus>:
	_delay_ms(2);
	E_OFF;
}
void LCD_AVR_Data_Bus(uint8_t a){
	// 0001
	if (a & 0x01){D4_ON;}
 10e:	80 ff       	sbrs	r24, 0
 110:	04 c0       	rjmp	.+8      	; 0x11a <LCD_AVR_Data_Bus+0xc>
 112:	95 b1       	in	r25, 0x05	; 5
 114:	94 60       	ori	r25, 0x04	; 4
 116:	95 b9       	out	0x05, r25	; 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <LCD_AVR_Data_Bus+0x12>
	else{D4_OFF;}
 11a:	95 b1       	in	r25, 0x05	; 5
 11c:	9b 7f       	andi	r25, 0xFB	; 251
 11e:	95 b9       	out	0x05, r25	; 5
	// 0010
	if (a & 0x02){D5_ON;}
 120:	81 ff       	sbrs	r24, 1
 122:	04 c0       	rjmp	.+8      	; 0x12c <LCD_AVR_Data_Bus+0x1e>
 124:	95 b1       	in	r25, 0x05	; 5
 126:	98 60       	ori	r25, 0x08	; 8
 128:	95 b9       	out	0x05, r25	; 5
 12a:	03 c0       	rjmp	.+6      	; 0x132 <LCD_AVR_Data_Bus+0x24>
	else{D5_OFF;}
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	97 7f       	andi	r25, 0xF7	; 247
 130:	95 b9       	out	0x05, r25	; 5
	// 0100
	if (a & 0x04){D6_ON;}
 132:	82 ff       	sbrs	r24, 2
 134:	04 c0       	rjmp	.+8      	; 0x13e <LCD_AVR_Data_Bus+0x30>
 136:	95 b1       	in	r25, 0x05	; 5
 138:	90 61       	ori	r25, 0x10	; 16
 13a:	95 b9       	out	0x05, r25	; 5
 13c:	03 c0       	rjmp	.+6      	; 0x144 <LCD_AVR_Data_Bus+0x36>
	else{D6_OFF;}
 13e:	95 b1       	in	r25, 0x05	; 5
 140:	9f 7e       	andi	r25, 0xEF	; 239
 142:	95 b9       	out	0x05, r25	; 5
	// 1000
	if (a & 0x08){D7_ON;}
 144:	83 ff       	sbrs	r24, 3
 146:	04 c0       	rjmp	.+8      	; 0x150 <LCD_AVR_Data_Bus+0x42>
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	08 95       	ret
	else{D7_OFF;}
 150:	85 b1       	in	r24, 0x05	; 5
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	85 b9       	out	0x05, r24	; 5
 156:	08 95       	ret

00000158 <LCD_AVR_Cmd>:
#include "LCD_Libreria.h"
#define  F_CPU 8000000UL
#include <util/delay.h>

void LCD_AVR_Cmd(uint8_t a){
	E_OFF;
 158:	95 b1       	in	r25, 0x05	; 5
 15a:	9e 7f       	andi	r25, 0xFE	; 254
 15c:	95 b9       	out	0x05, r25	; 5
	E_ON;
 15e:	95 b1       	in	r25, 0x05	; 5
 160:	91 60       	ori	r25, 0x01	; 1
 162:	95 b9       	out	0x05, r25	; 5
	LCD_AVR_Data_Bus(a)	;
 164:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_AVR_Data_Bus>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	8f e9       	ldi	r24, 0x9F	; 159
 16a:	9f e0       	ldi	r25, 0x0F	; 15
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_AVR_Cmd+0x14>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_AVR_Cmd+0x1a>
 172:	00 00       	nop
	_delay_ms(2);
	E_OFF;
 174:	85 b1       	in	r24, 0x05	; 5
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	85 b9       	out	0x05, r24	; 5
 17a:	08 95       	ret

0000017c <LCD_AVR_Init>:
	if (a & 0x08){D7_ON;}
	else{D7_OFF;}
}
void LCD_AVR_Init(void){
	
	DDRB |= (1<<0) |(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5);
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	8f 63       	ori	r24, 0x3F	; 63
 180:	84 b9       	out	0x04, r24	; 4
	
	LCD_AVR_Cmd(0X03);
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X03);
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X03);
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X02);
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X02);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X08);
 1a0:	88 e0       	ldi	r24, 0x08	; 8
 1a2:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X08);
 1ac:	88 e0       	ldi	r24, 0x08	; 8
 1ae:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X0C);
 1c4:	8c e0       	ldi	r24, 0x0C	; 12
 1c6:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
 1ca:	08 95       	ret

000001cc <LCD_AVR_Set_Cursor>:
	
}
void LCD_AVR_Set_Cursor(uint8_t x,Ubicacion y){
 1cc:	cf 93       	push	r28
	uint8_t m,n;

	RS_OFF;
 1ce:	95 b1       	in	r25, 0x05	; 5
 1d0:	9d 7f       	andi	r25, 0xFD	; 253
 1d2:	95 b9       	out	0x05, r25	; 5
	switch (y)
 1d4:	61 30       	cpi	r22, 0x01	; 1
 1d6:	c9 f0       	breq	.+50     	; 0x20a <LCD_AVR_Set_Cursor+0x3e>
 1d8:	28 f0       	brcs	.+10     	; 0x1e4 <LCD_AVR_Set_Cursor+0x18>
 1da:	62 30       	cpi	r22, 0x02	; 2
 1dc:	49 f1       	breq	.+82     	; 0x230 <LCD_AVR_Set_Cursor+0x64>
 1de:	63 30       	cpi	r22, 0x03	; 3
 1e0:	d1 f1       	breq	.+116    	; 0x256 <LCD_AVR_Set_Cursor+0x8a>
 1e2:	4b c0       	rjmp	.+150    	; 0x27a <LCD_AVR_Set_Cursor+0xae>
	{
		case Fila1:
		m=0x80+x;
 1e4:	c0 e8       	ldi	r28, 0x80	; 128
 1e6:	c8 0f       	add	r28, r24
		n=(0x80+x)>>4;
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	80 58       	subi	r24, 0x80	; 128
 1ec:	9f 4f       	sbci	r25, 0xFF	; 255
 1ee:	95 95       	asr	r25
 1f0:	87 95       	ror	r24
 1f2:	95 95       	asr	r25
 1f4:	87 95       	ror	r24
 1f6:	95 95       	asr	r25
 1f8:	87 95       	ror	r24
 1fa:	95 95       	asr	r25
 1fc:	87 95       	ror	r24
		LCD_AVR_Cmd(n);
 1fe:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
		LCD_AVR_Cmd(m);
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
		break;
 208:	38 c0       	rjmp	.+112    	; 0x27a <LCD_AVR_Set_Cursor+0xae>
		case Fila2:
		m=0xC0+x;
 20a:	c0 ec       	ldi	r28, 0xC0	; 192
 20c:	c8 0f       	add	r28, r24
		n=(0XC0+x)>>4;
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	80 54       	subi	r24, 0x40	; 64
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	95 95       	asr	r25
 21e:	87 95       	ror	r24
 220:	95 95       	asr	r25
 222:	87 95       	ror	r24
		LCD_AVR_Cmd(n);
 224:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
		LCD_AVR_Cmd(m);
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
		break;
 22e:	25 c0       	rjmp	.+74     	; 0x27a <LCD_AVR_Set_Cursor+0xae>
		case Fila3:
		m=0x94+x;
 230:	c4 e9       	ldi	r28, 0x94	; 148
 232:	c8 0f       	add	r28, r24
		n=(0x94+x)>>4;
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	8c 56       	subi	r24, 0x6C	; 108
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	95 95       	asr	r25
 240:	87 95       	ror	r24
 242:	95 95       	asr	r25
 244:	87 95       	ror	r24
 246:	95 95       	asr	r25
 248:	87 95       	ror	r24
		LCD_AVR_Cmd(n);
 24a:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
		LCD_AVR_Cmd(m);
 24e:	8c 2f       	mov	r24, r28
 250:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
		break;
 254:	12 c0       	rjmp	.+36     	; 0x27a <LCD_AVR_Set_Cursor+0xae>
		case Fila4:
		m=0xD4+x;
 256:	c4 ed       	ldi	r28, 0xD4	; 212
 258:	c8 0f       	add	r28, r24
		n=(0xD4+x)>>4;
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	8c 52       	subi	r24, 0x2C	; 44
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	95 95       	asr	r25
 26e:	87 95       	ror	r24
		LCD_AVR_Cmd(n);
 270:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
		LCD_AVR_Cmd(m);
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
		break;
	}
	
}
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <LCD_AVR_Print_Char>:
void LCD_AVR_Print_Char(char c){
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
	uint8_t m,n;
	m=c>>4;
	n=c;
	RS_ON;
 282:	85 b1       	in	r24, 0x05	; 5
 284:	82 60       	ori	r24, 0x02	; 2
 286:	85 b9       	out	0x05, r24	; 5
	LCD_AVR_Cmd(m);
 288:	8c 2f       	mov	r24, r28
 28a:	82 95       	swap	r24
 28c:	8f 70       	andi	r24, 0x0F	; 15
 28e:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(n);
 292:	8c 2f       	mov	r24, r28
 294:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_AVR_Cmd>
}
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <LCD_AVR_Print_String>:
void LCD_AVR_Print_String(char *c){
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
	
	char *ptr;
	ptr = c;
	while(*ptr)
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <LCD_AVR_Print_String+0xe>
	LCD_AVR_Print_Char(*ptr++);
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_AVR_Print_Char>
}
void LCD_AVR_Print_String(char *c){
	
	char *ptr;
	ptr = c;
	while(*ptr)
 2aa:	88 81       	ld	r24, Y
 2ac:	81 11       	cpse	r24, r1
 2ae:	fa cf       	rjmp	.-12     	; 0x2a4 <LCD_AVR_Print_String+0x8>
	LCD_AVR_Print_Char(*ptr++);
	
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <spi_init>:

void spi_init(uint8_t mode)
{
	if (SPI_DATA_ORDER == MSB_FIRST)
	{
		SPCR &= ~(1<<DORD);
 2b6:	9c b5       	in	r25, 0x2c	; 44
 2b8:	9f 7d       	andi	r25, 0xDF	; 223
 2ba:	9c bd       	out	0x2c, r25	; 44
	}
	else
	{
		SPCR |= (1<<DORD);
	}
	if(mode == SLAVE)
 2bc:	81 11       	cpse	r24, r1
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <spi_init+0x16>
	{
			// MISO OUTPUT, OTHERS INPUT
			DDRB |= (1<<DDD4);
 2c0:	84 b1       	in	r24, 0x04	; 4
 2c2:	80 61       	ori	r24, 0x10	; 16
 2c4:	84 b9       	out	0x04, r24	; 4
			/* Enable SPI */
			SPCR = (1<<SPE);
 2c6:	80 e4       	ldi	r24, 0x40	; 64
 2c8:	8c bd       	out	0x2c, r24	; 44
 2ca:	08 95       	ret
	}
	else
	{
			// MOSI , SCK OUTPUT
			DDRB |= (1<<DDB3)|(1<<DDB5);
 2cc:	84 b1       	in	r24, 0x04	; 4
 2ce:	88 62       	ori	r24, 0x28	; 40
 2d0:	84 b9       	out	0x04, r24	; 4
			DDRB |= (1<<DDB2); //SS OUTPUT
 2d2:	84 b1       	in	r24, 0x04	; 4
 2d4:	84 60       	ori	r24, 0x04	; 4
 2d6:	84 b9       	out	0x04, r24	; 4
			/*SPI Enable, Master Mod */
			SPCR |= ((1<<SPE)|(1<<MSTR));
 2d8:	8c b5       	in	r24, 0x2c	; 44
 2da:	80 65       	ori	r24, 0x50	; 80
 2dc:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (SPI_CLOCK_RATE); 
 2de:	8c b5       	in	r24, 0x2c	; 44
 2e0:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (SPI_SPEED);
 2e2:	8d b5       	in	r24, 0x2d	; 45
 2e4:	8d bd       	out	0x2d, r24	; 45
 2e6:	08 95       	ret

000002e8 <spi_transceive>:
}

uint8_t spi_transceive(uint8_t data)
{
	/* Send data */
	SPDR = data;
 2e8:	8e bd       	out	0x2e, r24	; 46
	/* wait for end of transmission */
	while(!(SPSR & (1<<SPIF)))
 2ea:	0d b4       	in	r0, 0x2d	; 45
 2ec:	07 fe       	sbrs	r0, 7
 2ee:	fd cf       	rjmp	.-6      	; 0x2ea <spi_transceive+0x2>
	;
	return SPDR;
 2f0:	8e b5       	in	r24, 0x2e	; 46
}
 2f2:	08 95       	ret

000002f4 <MCP_WRITE>:
		MCP_WRITE(valor1);
		_delay_ms(300);
    }
}

void MCP_WRITE(unsigned int dato){
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	80 e5       	ldi	r24, 0x50	; 80
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <MCP_WRITE+0x8>
	
	_delay_us(15);
	SS_ON;
 300:	85 b1       	in	r24, 0x05	; 5
 302:	8b 7f       	andi	r24, 0xFB	; 251
 304:	85 b9       	out	0x05, r24	; 5
 306:	80 e5       	ldi	r24, 0x50	; 80
 308:	8a 95       	dec	r24
 30a:	f1 f7       	brne	.-4      	; 0x308 <MCP_WRITE+0x14>
	_delay_us(15);
	data_buffer=spi_transceive((unsigned char)(((dato&0x0F00)>>8)|0x30));
 30c:	ce 01       	movw	r24, r28
 30e:	88 27       	eor	r24, r24
 310:	9f 70       	andi	r25, 0x0F	; 15
 312:	89 2f       	mov	r24, r25
 314:	80 63       	ori	r24, 0x30	; 48
 316:	0e 94 74 01 	call	0x2e8	; 0x2e8 <spi_transceive>
 31a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <data_buffer>
 31e:	80 e5       	ldi	r24, 0x50	; 80
 320:	8a 95       	dec	r24
 322:	f1 f7       	brne	.-4      	; 0x320 <MCP_WRITE+0x2c>
	_delay_us(15);
	data_buffer=spi_transceive((unsigned char)(dato&0x00FF));
 324:	8c 2f       	mov	r24, r28
 326:	0e 94 74 01 	call	0x2e8	; 0x2e8 <spi_transceive>
 32a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <data_buffer>
 32e:	80 e5       	ldi	r24, 0x50	; 80
 330:	8a 95       	dec	r24
 332:	f1 f7       	brne	.-4      	; 0x330 <MCP_WRITE+0x3c>
	_delay_us(15);
	SS_OFF;
 334:	85 b1       	in	r24, 0x05	; 5
 336:	84 60       	ori	r24, 0x04	; 4
 338:	85 b9       	out	0x05, r24	; 5
 33a:	80 e5       	ldi	r24, 0x50	; 80
 33c:	8a 95       	dec	r24
 33e:	f1 f7       	brne	.-4      	; 0x33c <MCP_WRITE+0x48>
	_delay_us(15);
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <main>:
void MCP_WRITE(unsigned int dato);

int main(void)
{
    /* Replace with your application code */
	ADC_Init();
 346:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	spi_init(MASTER);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <spi_init>
	LCD_AVR_Init();
 350:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_AVR_Init>
	SS_OFF;
 354:	85 b1       	in	r24, 0x05	; 5
 356:	84 60       	ori	r24, 0x04	; 4
 358:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		valor=ADC_AnalogRead(0);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 6d 00 	call	0xda	; 0xda <ADC_AnalogRead>
 360:	ec 01       	movw	r28, r24
 362:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <valor+0x1>
 366:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <valor>
		valor1=(4095.0/1023.0)*valor;
 36a:	bc 01       	movw	r22, r24
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 28 02 	call	0x450	; 0x450 <__floatunsisf>
 374:	26 e0       	ldi	r18, 0x06	; 6
 376:	38 e1       	ldi	r19, 0x18	; 24
 378:	40 e8       	ldi	r20, 0x80	; 128
 37a:	50 e4       	ldi	r21, 0x40	; 64
 37c:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3>
 380:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <__data_end>
 384:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <__data_end+0x1>
 388:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x2>
 38c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x3>
		sprintf(buffer,"%4d",valor);
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	84 e1       	ldi	r24, 0x14	; 20
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	9f 93       	push	r25
 39a:	8f 93       	push	r24
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	9f 93       	push	r25
 3a2:	8f 93       	push	r24
 3a4:	0e 94 23 03 	call	0x646	; 0x646 <sprintf>
		LCD_AVR_Set_Cursor(0,0);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_AVR_Set_Cursor>
		LCD_AVR_Print_String(buffer);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_AVR_Print_String>
		MCP_WRITE(valor1);
 3b8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 3bc:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 3c0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 3c4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 3c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__fixunssfsi>
 3cc:	cb 01       	movw	r24, r22
 3ce:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <MCP_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d2:	9f ef       	ldi	r25, 0xFF	; 255
 3d4:	25 ea       	ldi	r18, 0xA5	; 165
 3d6:	8e e0       	ldi	r24, 0x0E	; 14
 3d8:	91 50       	subi	r25, 0x01	; 1
 3da:	20 40       	sbci	r18, 0x00	; 0
 3dc:	80 40       	sbci	r24, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x92>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x9c>
 3e2:	00 00       	nop
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	b4 cf       	rjmp	.-152    	; 0x35a <main+0x14>

000003f2 <__fixunssfsi>:
 3f2:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_splitA>
 3f6:	88 f0       	brcs	.+34     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3f8:	9f 57       	subi	r25, 0x7F	; 127
 3fa:	98 f0       	brcs	.+38     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3fc:	b9 2f       	mov	r27, r25
 3fe:	99 27       	eor	r25, r25
 400:	b7 51       	subi	r27, 0x17	; 23
 402:	b0 f0       	brcs	.+44     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 404:	e1 f0       	breq	.+56     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	1a f0       	brmi	.+6      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 410:	ba 95       	dec	r27
 412:	c9 f7       	brne	.-14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 414:	14 c0       	rjmp	.+40     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 416:	b1 30       	cpi	r27, 0x01	; 1
 418:	91 f0       	breq	.+36     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 41a:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_zero>
 41e:	b1 e0       	ldi	r27, 0x01	; 1
 420:	08 95       	ret
 422:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_zero>
 426:	67 2f       	mov	r22, r23
 428:	78 2f       	mov	r23, r24
 42a:	88 27       	eor	r24, r24
 42c:	b8 5f       	subi	r27, 0xF8	; 248
 42e:	39 f0       	breq	.+14     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 430:	b9 3f       	cpi	r27, 0xF9	; 249
 432:	cc f3       	brlt	.-14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 434:	86 95       	lsr	r24
 436:	77 95       	ror	r23
 438:	67 95       	ror	r22
 43a:	b3 95       	inc	r27
 43c:	d9 f7       	brne	.-10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43e:	3e f4       	brtc	.+14     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 440:	90 95       	com	r25
 442:	80 95       	com	r24
 444:	70 95       	com	r23
 446:	61 95       	neg	r22
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	8f 4f       	sbci	r24, 0xFF	; 255
 44c:	9f 4f       	sbci	r25, 0xFF	; 255
 44e:	08 95       	ret

00000450 <__floatunsisf>:
 450:	e8 94       	clt
 452:	09 c0       	rjmp	.+18     	; 0x466 <__floatsisf+0x12>

00000454 <__floatsisf>:
 454:	97 fb       	bst	r25, 7
 456:	3e f4       	brtc	.+14     	; 0x466 <__floatsisf+0x12>
 458:	90 95       	com	r25
 45a:	80 95       	com	r24
 45c:	70 95       	com	r23
 45e:	61 95       	neg	r22
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	8f 4f       	sbci	r24, 0xFF	; 255
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	99 23       	and	r25, r25
 468:	a9 f0       	breq	.+42     	; 0x494 <__floatsisf+0x40>
 46a:	f9 2f       	mov	r31, r25
 46c:	96 e9       	ldi	r25, 0x96	; 150
 46e:	bb 27       	eor	r27, r27
 470:	93 95       	inc	r25
 472:	f6 95       	lsr	r31
 474:	87 95       	ror	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b7 95       	ror	r27
 47c:	f1 11       	cpse	r31, r1
 47e:	f8 cf       	rjmp	.-16     	; 0x470 <__floatsisf+0x1c>
 480:	fa f4       	brpl	.+62     	; 0x4c0 <__floatsisf+0x6c>
 482:	bb 0f       	add	r27, r27
 484:	11 f4       	brne	.+4      	; 0x48a <__floatsisf+0x36>
 486:	60 ff       	sbrs	r22, 0
 488:	1b c0       	rjmp	.+54     	; 0x4c0 <__floatsisf+0x6c>
 48a:	6f 5f       	subi	r22, 0xFF	; 255
 48c:	7f 4f       	sbci	r23, 0xFF	; 255
 48e:	8f 4f       	sbci	r24, 0xFF	; 255
 490:	9f 4f       	sbci	r25, 0xFF	; 255
 492:	16 c0       	rjmp	.+44     	; 0x4c0 <__floatsisf+0x6c>
 494:	88 23       	and	r24, r24
 496:	11 f0       	breq	.+4      	; 0x49c <__floatsisf+0x48>
 498:	96 e9       	ldi	r25, 0x96	; 150
 49a:	11 c0       	rjmp	.+34     	; 0x4be <__floatsisf+0x6a>
 49c:	77 23       	and	r23, r23
 49e:	21 f0       	breq	.+8      	; 0x4a8 <__floatsisf+0x54>
 4a0:	9e e8       	ldi	r25, 0x8E	; 142
 4a2:	87 2f       	mov	r24, r23
 4a4:	76 2f       	mov	r23, r22
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__floatsisf+0x5e>
 4a8:	66 23       	and	r22, r22
 4aa:	71 f0       	breq	.+28     	; 0x4c8 <__floatsisf+0x74>
 4ac:	96 e8       	ldi	r25, 0x86	; 134
 4ae:	86 2f       	mov	r24, r22
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	2a f0       	brmi	.+10     	; 0x4c0 <__floatsisf+0x6c>
 4b6:	9a 95       	dec	r25
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	da f7       	brpl	.-10     	; 0x4b6 <__floatsisf+0x62>
 4c0:	88 0f       	add	r24, r24
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	97 f9       	bld	r25, 7
 4c8:	08 95       	ret

000004ca <__fp_split3>:
 4ca:	57 fd       	sbrc	r21, 7
 4cc:	90 58       	subi	r25, 0x80	; 128
 4ce:	44 0f       	add	r20, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	59 f0       	breq	.+22     	; 0x4ea <__fp_splitA+0x10>
 4d4:	5f 3f       	cpi	r21, 0xFF	; 255
 4d6:	71 f0       	breq	.+28     	; 0x4f4 <__fp_splitA+0x1a>
 4d8:	47 95       	ror	r20

000004da <__fp_splitA>:
 4da:	88 0f       	add	r24, r24
 4dc:	97 fb       	bst	r25, 7
 4de:	99 1f       	adc	r25, r25
 4e0:	61 f0       	breq	.+24     	; 0x4fa <__fp_splitA+0x20>
 4e2:	9f 3f       	cpi	r25, 0xFF	; 255
 4e4:	79 f0       	breq	.+30     	; 0x504 <__fp_splitA+0x2a>
 4e6:	87 95       	ror	r24
 4e8:	08 95       	ret
 4ea:	12 16       	cp	r1, r18
 4ec:	13 06       	cpc	r1, r19
 4ee:	14 06       	cpc	r1, r20
 4f0:	55 1f       	adc	r21, r21
 4f2:	f2 cf       	rjmp	.-28     	; 0x4d8 <__fp_split3+0xe>
 4f4:	46 95       	lsr	r20
 4f6:	f1 df       	rcall	.-30     	; 0x4da <__fp_splitA>
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <__fp_splitA+0x30>
 4fa:	16 16       	cp	r1, r22
 4fc:	17 06       	cpc	r1, r23
 4fe:	18 06       	cpc	r1, r24
 500:	99 1f       	adc	r25, r25
 502:	f1 cf       	rjmp	.-30     	; 0x4e6 <__fp_splitA+0xc>
 504:	86 95       	lsr	r24
 506:	71 05       	cpc	r23, r1
 508:	61 05       	cpc	r22, r1
 50a:	08 94       	sec
 50c:	08 95       	ret

0000050e <__fp_zero>:
 50e:	e8 94       	clt

00000510 <__fp_szero>:
 510:	bb 27       	eor	r27, r27
 512:	66 27       	eor	r22, r22
 514:	77 27       	eor	r23, r23
 516:	cb 01       	movw	r24, r22
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret

0000051c <__mulsf3>:
 51c:	0e 94 a1 02 	call	0x542	; 0x542 <__mulsf3x>
 520:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_round>
 524:	0e 94 04 03 	call	0x608	; 0x608 <__fp_pscA>
 528:	38 f0       	brcs	.+14     	; 0x538 <__mulsf3+0x1c>
 52a:	0e 94 0b 03 	call	0x616	; 0x616 <__fp_pscB>
 52e:	20 f0       	brcs	.+8      	; 0x538 <__mulsf3+0x1c>
 530:	95 23       	and	r25, r21
 532:	11 f0       	breq	.+4      	; 0x538 <__mulsf3+0x1c>
 534:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_inf>
 538:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_nan>
 53c:	11 24       	eor	r1, r1
 53e:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_szero>

00000542 <__mulsf3x>:
 542:	0e 94 65 02 	call	0x4ca	; 0x4ca <__fp_split3>
 546:	70 f3       	brcs	.-36     	; 0x524 <__mulsf3+0x8>

00000548 <__mulsf3_pse>:
 548:	95 9f       	mul	r25, r21
 54a:	c1 f3       	breq	.-16     	; 0x53c <__mulsf3+0x20>
 54c:	95 0f       	add	r25, r21
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	55 1f       	adc	r21, r21
 552:	62 9f       	mul	r22, r18
 554:	f0 01       	movw	r30, r0
 556:	72 9f       	mul	r23, r18
 558:	bb 27       	eor	r27, r27
 55a:	f0 0d       	add	r31, r0
 55c:	b1 1d       	adc	r27, r1
 55e:	63 9f       	mul	r22, r19
 560:	aa 27       	eor	r26, r26
 562:	f0 0d       	add	r31, r0
 564:	b1 1d       	adc	r27, r1
 566:	aa 1f       	adc	r26, r26
 568:	64 9f       	mul	r22, r20
 56a:	66 27       	eor	r22, r22
 56c:	b0 0d       	add	r27, r0
 56e:	a1 1d       	adc	r26, r1
 570:	66 1f       	adc	r22, r22
 572:	82 9f       	mul	r24, r18
 574:	22 27       	eor	r18, r18
 576:	b0 0d       	add	r27, r0
 578:	a1 1d       	adc	r26, r1
 57a:	62 1f       	adc	r22, r18
 57c:	73 9f       	mul	r23, r19
 57e:	b0 0d       	add	r27, r0
 580:	a1 1d       	adc	r26, r1
 582:	62 1f       	adc	r22, r18
 584:	83 9f       	mul	r24, r19
 586:	a0 0d       	add	r26, r0
 588:	61 1d       	adc	r22, r1
 58a:	22 1f       	adc	r18, r18
 58c:	74 9f       	mul	r23, r20
 58e:	33 27       	eor	r19, r19
 590:	a0 0d       	add	r26, r0
 592:	61 1d       	adc	r22, r1
 594:	23 1f       	adc	r18, r19
 596:	84 9f       	mul	r24, r20
 598:	60 0d       	add	r22, r0
 59a:	21 1d       	adc	r18, r1
 59c:	82 2f       	mov	r24, r18
 59e:	76 2f       	mov	r23, r22
 5a0:	6a 2f       	mov	r22, r26
 5a2:	11 24       	eor	r1, r1
 5a4:	9f 57       	subi	r25, 0x7F	; 127
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	9a f0       	brmi	.+38     	; 0x5d0 <__mulsf3_pse+0x88>
 5aa:	f1 f0       	breq	.+60     	; 0x5e8 <__mulsf3_pse+0xa0>
 5ac:	88 23       	and	r24, r24
 5ae:	4a f0       	brmi	.+18     	; 0x5c2 <__mulsf3_pse+0x7a>
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	bb 1f       	adc	r27, r27
 5b6:	66 1f       	adc	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	91 50       	subi	r25, 0x01	; 1
 5be:	50 40       	sbci	r21, 0x00	; 0
 5c0:	a9 f7       	brne	.-22     	; 0x5ac <__mulsf3_pse+0x64>
 5c2:	9e 3f       	cpi	r25, 0xFE	; 254
 5c4:	51 05       	cpc	r21, r1
 5c6:	80 f0       	brcs	.+32     	; 0x5e8 <__mulsf3_pse+0xa0>
 5c8:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_inf>
 5cc:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_szero>
 5d0:	5f 3f       	cpi	r21, 0xFF	; 255
 5d2:	e4 f3       	brlt	.-8      	; 0x5cc <__mulsf3_pse+0x84>
 5d4:	98 3e       	cpi	r25, 0xE8	; 232
 5d6:	d4 f3       	brlt	.-12     	; 0x5cc <__mulsf3_pse+0x84>
 5d8:	86 95       	lsr	r24
 5da:	77 95       	ror	r23
 5dc:	67 95       	ror	r22
 5de:	b7 95       	ror	r27
 5e0:	f7 95       	ror	r31
 5e2:	e7 95       	ror	r30
 5e4:	9f 5f       	subi	r25, 0xFF	; 255
 5e6:	c1 f7       	brne	.-16     	; 0x5d8 <__mulsf3_pse+0x90>
 5e8:	fe 2b       	or	r31, r30
 5ea:	88 0f       	add	r24, r24
 5ec:	91 1d       	adc	r25, r1
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
 5f2:	97 f9       	bld	r25, 7
 5f4:	08 95       	ret

000005f6 <__fp_inf>:
 5f6:	97 f9       	bld	r25, 7
 5f8:	9f 67       	ori	r25, 0x7F	; 127
 5fa:	80 e8       	ldi	r24, 0x80	; 128
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	08 95       	ret

00000602 <__fp_nan>:
 602:	9f ef       	ldi	r25, 0xFF	; 255
 604:	80 ec       	ldi	r24, 0xC0	; 192
 606:	08 95       	ret

00000608 <__fp_pscA>:
 608:	00 24       	eor	r0, r0
 60a:	0a 94       	dec	r0
 60c:	16 16       	cp	r1, r22
 60e:	17 06       	cpc	r1, r23
 610:	18 06       	cpc	r1, r24
 612:	09 06       	cpc	r0, r25
 614:	08 95       	ret

00000616 <__fp_pscB>:
 616:	00 24       	eor	r0, r0
 618:	0a 94       	dec	r0
 61a:	12 16       	cp	r1, r18
 61c:	13 06       	cpc	r1, r19
 61e:	14 06       	cpc	r1, r20
 620:	05 06       	cpc	r0, r21
 622:	08 95       	ret

00000624 <__fp_round>:
 624:	09 2e       	mov	r0, r25
 626:	03 94       	inc	r0
 628:	00 0c       	add	r0, r0
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0xc>
 62c:	88 23       	and	r24, r24
 62e:	52 f0       	brmi	.+20     	; 0x644 <__fp_round+0x20>
 630:	bb 0f       	add	r27, r27
 632:	40 f4       	brcc	.+16     	; 0x644 <__fp_round+0x20>
 634:	bf 2b       	or	r27, r31
 636:	11 f4       	brne	.+4      	; 0x63c <__fp_round+0x18>
 638:	60 ff       	sbrs	r22, 0
 63a:	04 c0       	rjmp	.+8      	; 0x644 <__fp_round+0x20>
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <sprintf>:
 646:	ae e0       	ldi	r26, 0x0E	; 14
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	e9 e2       	ldi	r30, 0x29	; 41
 64c:	f3 e0       	ldi	r31, 0x03	; 3
 64e:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__prologue_saves__+0x1c>
 652:	0d 89       	ldd	r16, Y+21	; 0x15
 654:	1e 89       	ldd	r17, Y+22	; 0x16
 656:	86 e0       	ldi	r24, 0x06	; 6
 658:	8c 83       	std	Y+4, r24	; 0x04
 65a:	1a 83       	std	Y+2, r17	; 0x02
 65c:	09 83       	std	Y+1, r16	; 0x01
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	9f e7       	ldi	r25, 0x7F	; 127
 662:	9e 83       	std	Y+6, r25	; 0x06
 664:	8d 83       	std	Y+5, r24	; 0x05
 666:	ae 01       	movw	r20, r28
 668:	47 5e       	subi	r20, 0xE7	; 231
 66a:	5f 4f       	sbci	r21, 0xFF	; 255
 66c:	6f 89       	ldd	r22, Y+23	; 0x17
 66e:	78 8d       	ldd	r23, Y+24	; 0x18
 670:	ce 01       	movw	r24, r28
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	0e 94 45 03 	call	0x68a	; 0x68a <vfprintf>
 678:	ef 81       	ldd	r30, Y+7	; 0x07
 67a:	f8 85       	ldd	r31, Y+8	; 0x08
 67c:	e0 0f       	add	r30, r16
 67e:	f1 1f       	adc	r31, r17
 680:	10 82       	st	Z, r1
 682:	2e 96       	adiw	r28, 0x0e	; 14
 684:	e4 e0       	ldi	r30, 0x04	; 4
 686:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__epilogue_restores__+0x1c>

0000068a <vfprintf>:
 68a:	ab e0       	ldi	r26, 0x0B	; 11
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	eb e4       	ldi	r30, 0x4B	; 75
 690:	f3 e0       	ldi	r31, 0x03	; 3
 692:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__prologue_saves__>
 696:	6c 01       	movw	r12, r24
 698:	7b 01       	movw	r14, r22
 69a:	8a 01       	movw	r16, r20
 69c:	fc 01       	movw	r30, r24
 69e:	17 82       	std	Z+7, r1	; 0x07
 6a0:	16 82       	std	Z+6, r1	; 0x06
 6a2:	83 81       	ldd	r24, Z+3	; 0x03
 6a4:	81 ff       	sbrs	r24, 1
 6a6:	cc c1       	rjmp	.+920    	; 0xa40 <__stack+0x141>
 6a8:	ce 01       	movw	r24, r28
 6aa:	01 96       	adiw	r24, 0x01	; 1
 6ac:	3c 01       	movw	r6, r24
 6ae:	f6 01       	movw	r30, r12
 6b0:	93 81       	ldd	r25, Z+3	; 0x03
 6b2:	f7 01       	movw	r30, r14
 6b4:	93 fd       	sbrc	r25, 3
 6b6:	85 91       	lpm	r24, Z+
 6b8:	93 ff       	sbrs	r25, 3
 6ba:	81 91       	ld	r24, Z+
 6bc:	7f 01       	movw	r14, r30
 6be:	88 23       	and	r24, r24
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <vfprintf+0x3a>
 6c2:	ba c1       	rjmp	.+884    	; 0xa38 <__stack+0x139>
 6c4:	85 32       	cpi	r24, 0x25	; 37
 6c6:	39 f4       	brne	.+14     	; 0x6d6 <vfprintf+0x4c>
 6c8:	93 fd       	sbrc	r25, 3
 6ca:	85 91       	lpm	r24, Z+
 6cc:	93 ff       	sbrs	r25, 3
 6ce:	81 91       	ld	r24, Z+
 6d0:	7f 01       	movw	r14, r30
 6d2:	85 32       	cpi	r24, 0x25	; 37
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <vfprintf+0x56>
 6d6:	b6 01       	movw	r22, r12
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 3c 05 	call	0xa78	; 0xa78 <fputc>
 6de:	e7 cf       	rjmp	.-50     	; 0x6ae <vfprintf+0x24>
 6e0:	91 2c       	mov	r9, r1
 6e2:	21 2c       	mov	r2, r1
 6e4:	31 2c       	mov	r3, r1
 6e6:	ff e1       	ldi	r31, 0x1F	; 31
 6e8:	f3 15       	cp	r31, r3
 6ea:	d8 f0       	brcs	.+54     	; 0x722 <vfprintf+0x98>
 6ec:	8b 32       	cpi	r24, 0x2B	; 43
 6ee:	79 f0       	breq	.+30     	; 0x70e <vfprintf+0x84>
 6f0:	38 f4       	brcc	.+14     	; 0x700 <vfprintf+0x76>
 6f2:	80 32       	cpi	r24, 0x20	; 32
 6f4:	79 f0       	breq	.+30     	; 0x714 <vfprintf+0x8a>
 6f6:	83 32       	cpi	r24, 0x23	; 35
 6f8:	a1 f4       	brne	.+40     	; 0x722 <vfprintf+0x98>
 6fa:	23 2d       	mov	r18, r3
 6fc:	20 61       	ori	r18, 0x10	; 16
 6fe:	1d c0       	rjmp	.+58     	; 0x73a <vfprintf+0xb0>
 700:	8d 32       	cpi	r24, 0x2D	; 45
 702:	61 f0       	breq	.+24     	; 0x71c <vfprintf+0x92>
 704:	80 33       	cpi	r24, 0x30	; 48
 706:	69 f4       	brne	.+26     	; 0x722 <vfprintf+0x98>
 708:	23 2d       	mov	r18, r3
 70a:	21 60       	ori	r18, 0x01	; 1
 70c:	16 c0       	rjmp	.+44     	; 0x73a <vfprintf+0xb0>
 70e:	83 2d       	mov	r24, r3
 710:	82 60       	ori	r24, 0x02	; 2
 712:	38 2e       	mov	r3, r24
 714:	e3 2d       	mov	r30, r3
 716:	e4 60       	ori	r30, 0x04	; 4
 718:	3e 2e       	mov	r3, r30
 71a:	2a c0       	rjmp	.+84     	; 0x770 <vfprintf+0xe6>
 71c:	f3 2d       	mov	r31, r3
 71e:	f8 60       	ori	r31, 0x08	; 8
 720:	1d c0       	rjmp	.+58     	; 0x75c <vfprintf+0xd2>
 722:	37 fc       	sbrc	r3, 7
 724:	2d c0       	rjmp	.+90     	; 0x780 <vfprintf+0xf6>
 726:	20 ed       	ldi	r18, 0xD0	; 208
 728:	28 0f       	add	r18, r24
 72a:	2a 30       	cpi	r18, 0x0A	; 10
 72c:	40 f0       	brcs	.+16     	; 0x73e <vfprintf+0xb4>
 72e:	8e 32       	cpi	r24, 0x2E	; 46
 730:	b9 f4       	brne	.+46     	; 0x760 <vfprintf+0xd6>
 732:	36 fc       	sbrc	r3, 6
 734:	81 c1       	rjmp	.+770    	; 0xa38 <__stack+0x139>
 736:	23 2d       	mov	r18, r3
 738:	20 64       	ori	r18, 0x40	; 64
 73a:	32 2e       	mov	r3, r18
 73c:	19 c0       	rjmp	.+50     	; 0x770 <vfprintf+0xe6>
 73e:	36 fe       	sbrs	r3, 6
 740:	06 c0       	rjmp	.+12     	; 0x74e <vfprintf+0xc4>
 742:	8a e0       	ldi	r24, 0x0A	; 10
 744:	98 9e       	mul	r9, r24
 746:	20 0d       	add	r18, r0
 748:	11 24       	eor	r1, r1
 74a:	92 2e       	mov	r9, r18
 74c:	11 c0       	rjmp	.+34     	; 0x770 <vfprintf+0xe6>
 74e:	ea e0       	ldi	r30, 0x0A	; 10
 750:	2e 9e       	mul	r2, r30
 752:	20 0d       	add	r18, r0
 754:	11 24       	eor	r1, r1
 756:	22 2e       	mov	r2, r18
 758:	f3 2d       	mov	r31, r3
 75a:	f0 62       	ori	r31, 0x20	; 32
 75c:	3f 2e       	mov	r3, r31
 75e:	08 c0       	rjmp	.+16     	; 0x770 <vfprintf+0xe6>
 760:	8c 36       	cpi	r24, 0x6C	; 108
 762:	21 f4       	brne	.+8      	; 0x76c <vfprintf+0xe2>
 764:	83 2d       	mov	r24, r3
 766:	80 68       	ori	r24, 0x80	; 128
 768:	38 2e       	mov	r3, r24
 76a:	02 c0       	rjmp	.+4      	; 0x770 <vfprintf+0xe6>
 76c:	88 36       	cpi	r24, 0x68	; 104
 76e:	41 f4       	brne	.+16     	; 0x780 <vfprintf+0xf6>
 770:	f7 01       	movw	r30, r14
 772:	93 fd       	sbrc	r25, 3
 774:	85 91       	lpm	r24, Z+
 776:	93 ff       	sbrs	r25, 3
 778:	81 91       	ld	r24, Z+
 77a:	7f 01       	movw	r14, r30
 77c:	81 11       	cpse	r24, r1
 77e:	b3 cf       	rjmp	.-154    	; 0x6e6 <vfprintf+0x5c>
 780:	98 2f       	mov	r25, r24
 782:	9f 7d       	andi	r25, 0xDF	; 223
 784:	95 54       	subi	r25, 0x45	; 69
 786:	93 30       	cpi	r25, 0x03	; 3
 788:	28 f4       	brcc	.+10     	; 0x794 <vfprintf+0x10a>
 78a:	0c 5f       	subi	r16, 0xFC	; 252
 78c:	1f 4f       	sbci	r17, 0xFF	; 255
 78e:	9f e3       	ldi	r25, 0x3F	; 63
 790:	99 83       	std	Y+1, r25	; 0x01
 792:	0d c0       	rjmp	.+26     	; 0x7ae <vfprintf+0x124>
 794:	83 36       	cpi	r24, 0x63	; 99
 796:	31 f0       	breq	.+12     	; 0x7a4 <vfprintf+0x11a>
 798:	83 37       	cpi	r24, 0x73	; 115
 79a:	71 f0       	breq	.+28     	; 0x7b8 <vfprintf+0x12e>
 79c:	83 35       	cpi	r24, 0x53	; 83
 79e:	09 f0       	breq	.+2      	; 0x7a2 <vfprintf+0x118>
 7a0:	59 c0       	rjmp	.+178    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 7a2:	21 c0       	rjmp	.+66     	; 0x7e6 <vfprintf+0x15c>
 7a4:	f8 01       	movw	r30, r16
 7a6:	80 81       	ld	r24, Z
 7a8:	89 83       	std	Y+1, r24	; 0x01
 7aa:	0e 5f       	subi	r16, 0xFE	; 254
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	88 24       	eor	r8, r8
 7b0:	83 94       	inc	r8
 7b2:	91 2c       	mov	r9, r1
 7b4:	53 01       	movw	r10, r6
 7b6:	13 c0       	rjmp	.+38     	; 0x7de <vfprintf+0x154>
 7b8:	28 01       	movw	r4, r16
 7ba:	f2 e0       	ldi	r31, 0x02	; 2
 7bc:	4f 0e       	add	r4, r31
 7be:	51 1c       	adc	r5, r1
 7c0:	f8 01       	movw	r30, r16
 7c2:	a0 80       	ld	r10, Z
 7c4:	b1 80       	ldd	r11, Z+1	; 0x01
 7c6:	36 fe       	sbrs	r3, 6
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <vfprintf+0x146>
 7ca:	69 2d       	mov	r22, r9
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x14a>
 7d0:	6f ef       	ldi	r22, 0xFF	; 255
 7d2:	7f ef       	ldi	r23, 0xFF	; 255
 7d4:	c5 01       	movw	r24, r10
 7d6:	0e 94 31 05 	call	0xa62	; 0xa62 <strnlen>
 7da:	4c 01       	movw	r8, r24
 7dc:	82 01       	movw	r16, r4
 7de:	f3 2d       	mov	r31, r3
 7e0:	ff 77       	andi	r31, 0x7F	; 127
 7e2:	3f 2e       	mov	r3, r31
 7e4:	16 c0       	rjmp	.+44     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7e6:	28 01       	movw	r4, r16
 7e8:	22 e0       	ldi	r18, 0x02	; 2
 7ea:	42 0e       	add	r4, r18
 7ec:	51 1c       	adc	r5, r1
 7ee:	f8 01       	movw	r30, r16
 7f0:	a0 80       	ld	r10, Z
 7f2:	b1 80       	ldd	r11, Z+1	; 0x01
 7f4:	36 fe       	sbrs	r3, 6
 7f6:	03 c0       	rjmp	.+6      	; 0x7fe <vfprintf+0x174>
 7f8:	69 2d       	mov	r22, r9
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	6f ef       	ldi	r22, 0xFF	; 255
 800:	7f ef       	ldi	r23, 0xFF	; 255
 802:	c5 01       	movw	r24, r10
 804:	0e 94 26 05 	call	0xa4c	; 0xa4c <strnlen_P>
 808:	4c 01       	movw	r8, r24
 80a:	f3 2d       	mov	r31, r3
 80c:	f0 68       	ori	r31, 0x80	; 128
 80e:	3f 2e       	mov	r3, r31
 810:	82 01       	movw	r16, r4
 812:	33 fc       	sbrc	r3, 3
 814:	1b c0       	rjmp	.+54     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 816:	82 2d       	mov	r24, r2
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	88 16       	cp	r8, r24
 81c:	99 06       	cpc	r9, r25
 81e:	b0 f4       	brcc	.+44     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 820:	b6 01       	movw	r22, r12
 822:	80 e2       	ldi	r24, 0x20	; 32
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 3c 05 	call	0xa78	; 0xa78 <fputc>
 82a:	2a 94       	dec	r2
 82c:	f4 cf       	rjmp	.-24     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 82e:	f5 01       	movw	r30, r10
 830:	37 fc       	sbrc	r3, 7
 832:	85 91       	lpm	r24, Z+
 834:	37 fe       	sbrs	r3, 7
 836:	81 91       	ld	r24, Z+
 838:	5f 01       	movw	r10, r30
 83a:	b6 01       	movw	r22, r12
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 3c 05 	call	0xa78	; 0xa78 <fputc>
 842:	21 10       	cpse	r2, r1
 844:	2a 94       	dec	r2
 846:	21 e0       	ldi	r18, 0x01	; 1
 848:	82 1a       	sub	r8, r18
 84a:	91 08       	sbc	r9, r1
 84c:	81 14       	cp	r8, r1
 84e:	91 04       	cpc	r9, r1
 850:	71 f7       	brne	.-36     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 852:	e8 c0       	rjmp	.+464    	; 0xa24 <__stack+0x125>
 854:	84 36       	cpi	r24, 0x64	; 100
 856:	11 f0       	breq	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 858:	89 36       	cpi	r24, 0x69	; 105
 85a:	41 f5       	brne	.+80     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 85c:	f8 01       	movw	r30, r16
 85e:	37 fe       	sbrs	r3, 7
 860:	07 c0       	rjmp	.+14     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 862:	60 81       	ld	r22, Z
 864:	71 81       	ldd	r23, Z+1	; 0x01
 866:	82 81       	ldd	r24, Z+2	; 0x02
 868:	93 81       	ldd	r25, Z+3	; 0x03
 86a:	0c 5f       	subi	r16, 0xFC	; 252
 86c:	1f 4f       	sbci	r17, 0xFF	; 255
 86e:	08 c0       	rjmp	.+16     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 870:	60 81       	ld	r22, Z
 872:	71 81       	ldd	r23, Z+1	; 0x01
 874:	07 2e       	mov	r0, r23
 876:	00 0c       	add	r0, r0
 878:	88 0b       	sbc	r24, r24
 87a:	99 0b       	sbc	r25, r25
 87c:	0e 5f       	subi	r16, 0xFE	; 254
 87e:	1f 4f       	sbci	r17, 0xFF	; 255
 880:	f3 2d       	mov	r31, r3
 882:	ff 76       	andi	r31, 0x6F	; 111
 884:	3f 2e       	mov	r3, r31
 886:	97 ff       	sbrs	r25, 7
 888:	09 c0       	rjmp	.+18     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 88a:	90 95       	com	r25
 88c:	80 95       	com	r24
 88e:	70 95       	com	r23
 890:	61 95       	neg	r22
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	f0 68       	ori	r31, 0x80	; 128
 89a:	3f 2e       	mov	r3, r31
 89c:	2a e0       	ldi	r18, 0x0A	; 10
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	a3 01       	movw	r20, r6
 8a2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ultoa_invert>
 8a6:	88 2e       	mov	r8, r24
 8a8:	86 18       	sub	r8, r6
 8aa:	45 c0       	rjmp	.+138    	; 0x936 <__stack+0x37>
 8ac:	85 37       	cpi	r24, 0x75	; 117
 8ae:	31 f4       	brne	.+12     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8b0:	23 2d       	mov	r18, r3
 8b2:	2f 7e       	andi	r18, 0xEF	; 239
 8b4:	b2 2e       	mov	r11, r18
 8b6:	2a e0       	ldi	r18, 0x0A	; 10
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	25 c0       	rjmp	.+74     	; 0x906 <__stack+0x7>
 8bc:	93 2d       	mov	r25, r3
 8be:	99 7f       	andi	r25, 0xF9	; 249
 8c0:	b9 2e       	mov	r11, r25
 8c2:	8f 36       	cpi	r24, 0x6F	; 111
 8c4:	c1 f0       	breq	.+48     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8c6:	18 f4       	brcc	.+6      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8c8:	88 35       	cpi	r24, 0x58	; 88
 8ca:	79 f0       	breq	.+30     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8cc:	b5 c0       	rjmp	.+362    	; 0xa38 <__stack+0x139>
 8ce:	80 37       	cpi	r24, 0x70	; 112
 8d0:	19 f0       	breq	.+6      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8d2:	88 37       	cpi	r24, 0x78	; 120
 8d4:	21 f0       	breq	.+8      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8d6:	b0 c0       	rjmp	.+352    	; 0xa38 <__stack+0x139>
 8d8:	e9 2f       	mov	r30, r25
 8da:	e0 61       	ori	r30, 0x10	; 16
 8dc:	be 2e       	mov	r11, r30
 8de:	b4 fe       	sbrs	r11, 4
 8e0:	0d c0       	rjmp	.+26     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8e2:	fb 2d       	mov	r31, r11
 8e4:	f4 60       	ori	r31, 0x04	; 4
 8e6:	bf 2e       	mov	r11, r31
 8e8:	09 c0       	rjmp	.+18     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8ea:	34 fe       	sbrs	r3, 4
 8ec:	0a c0       	rjmp	.+20     	; 0x902 <__stack+0x3>
 8ee:	29 2f       	mov	r18, r25
 8f0:	26 60       	ori	r18, 0x06	; 6
 8f2:	b2 2e       	mov	r11, r18
 8f4:	06 c0       	rjmp	.+12     	; 0x902 <__stack+0x3>
 8f6:	28 e0       	ldi	r18, 0x08	; 8
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	05 c0       	rjmp	.+10     	; 0x906 <__stack+0x7>
 8fc:	20 e1       	ldi	r18, 0x10	; 16
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0x7>
 902:	20 e1       	ldi	r18, 0x10	; 16
 904:	32 e0       	ldi	r19, 0x02	; 2
 906:	f8 01       	movw	r30, r16
 908:	b7 fe       	sbrs	r11, 7
 90a:	07 c0       	rjmp	.+14     	; 0x91a <__stack+0x1b>
 90c:	60 81       	ld	r22, Z
 90e:	71 81       	ldd	r23, Z+1	; 0x01
 910:	82 81       	ldd	r24, Z+2	; 0x02
 912:	93 81       	ldd	r25, Z+3	; 0x03
 914:	0c 5f       	subi	r16, 0xFC	; 252
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	06 c0       	rjmp	.+12     	; 0x926 <__stack+0x27>
 91a:	60 81       	ld	r22, Z
 91c:	71 81       	ldd	r23, Z+1	; 0x01
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 5f       	subi	r16, 0xFE	; 254
 924:	1f 4f       	sbci	r17, 0xFF	; 255
 926:	a3 01       	movw	r20, r6
 928:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ultoa_invert>
 92c:	88 2e       	mov	r8, r24
 92e:	86 18       	sub	r8, r6
 930:	fb 2d       	mov	r31, r11
 932:	ff 77       	andi	r31, 0x7F	; 127
 934:	3f 2e       	mov	r3, r31
 936:	36 fe       	sbrs	r3, 6
 938:	0d c0       	rjmp	.+26     	; 0x954 <__stack+0x55>
 93a:	23 2d       	mov	r18, r3
 93c:	2e 7f       	andi	r18, 0xFE	; 254
 93e:	a2 2e       	mov	r10, r18
 940:	89 14       	cp	r8, r9
 942:	58 f4       	brcc	.+22     	; 0x95a <__stack+0x5b>
 944:	34 fe       	sbrs	r3, 4
 946:	0b c0       	rjmp	.+22     	; 0x95e <__stack+0x5f>
 948:	32 fc       	sbrc	r3, 2
 94a:	09 c0       	rjmp	.+18     	; 0x95e <__stack+0x5f>
 94c:	83 2d       	mov	r24, r3
 94e:	8e 7e       	andi	r24, 0xEE	; 238
 950:	a8 2e       	mov	r10, r24
 952:	05 c0       	rjmp	.+10     	; 0x95e <__stack+0x5f>
 954:	b8 2c       	mov	r11, r8
 956:	a3 2c       	mov	r10, r3
 958:	03 c0       	rjmp	.+6      	; 0x960 <__stack+0x61>
 95a:	b8 2c       	mov	r11, r8
 95c:	01 c0       	rjmp	.+2      	; 0x960 <__stack+0x61>
 95e:	b9 2c       	mov	r11, r9
 960:	a4 fe       	sbrs	r10, 4
 962:	0f c0       	rjmp	.+30     	; 0x982 <__stack+0x83>
 964:	fe 01       	movw	r30, r28
 966:	e8 0d       	add	r30, r8
 968:	f1 1d       	adc	r31, r1
 96a:	80 81       	ld	r24, Z
 96c:	80 33       	cpi	r24, 0x30	; 48
 96e:	21 f4       	brne	.+8      	; 0x978 <__stack+0x79>
 970:	9a 2d       	mov	r25, r10
 972:	99 7e       	andi	r25, 0xE9	; 233
 974:	a9 2e       	mov	r10, r25
 976:	09 c0       	rjmp	.+18     	; 0x98a <__stack+0x8b>
 978:	a2 fe       	sbrs	r10, 2
 97a:	06 c0       	rjmp	.+12     	; 0x988 <__stack+0x89>
 97c:	b3 94       	inc	r11
 97e:	b3 94       	inc	r11
 980:	04 c0       	rjmp	.+8      	; 0x98a <__stack+0x8b>
 982:	8a 2d       	mov	r24, r10
 984:	86 78       	andi	r24, 0x86	; 134
 986:	09 f0       	breq	.+2      	; 0x98a <__stack+0x8b>
 988:	b3 94       	inc	r11
 98a:	a3 fc       	sbrc	r10, 3
 98c:	11 c0       	rjmp	.+34     	; 0x9b0 <__stack+0xb1>
 98e:	a0 fe       	sbrs	r10, 0
 990:	06 c0       	rjmp	.+12     	; 0x99e <__stack+0x9f>
 992:	b2 14       	cp	r11, r2
 994:	88 f4       	brcc	.+34     	; 0x9b8 <__stack+0xb9>
 996:	28 0c       	add	r2, r8
 998:	92 2c       	mov	r9, r2
 99a:	9b 18       	sub	r9, r11
 99c:	0e c0       	rjmp	.+28     	; 0x9ba <__stack+0xbb>
 99e:	b2 14       	cp	r11, r2
 9a0:	60 f4       	brcc	.+24     	; 0x9ba <__stack+0xbb>
 9a2:	b6 01       	movw	r22, r12
 9a4:	80 e2       	ldi	r24, 0x20	; 32
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 94 3c 05 	call	0xa78	; 0xa78 <fputc>
 9ac:	b3 94       	inc	r11
 9ae:	f7 cf       	rjmp	.-18     	; 0x99e <__stack+0x9f>
 9b0:	b2 14       	cp	r11, r2
 9b2:	18 f4       	brcc	.+6      	; 0x9ba <__stack+0xbb>
 9b4:	2b 18       	sub	r2, r11
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <__stack+0xbd>
 9b8:	98 2c       	mov	r9, r8
 9ba:	21 2c       	mov	r2, r1
 9bc:	a4 fe       	sbrs	r10, 4
 9be:	10 c0       	rjmp	.+32     	; 0x9e0 <__stack+0xe1>
 9c0:	b6 01       	movw	r22, r12
 9c2:	80 e3       	ldi	r24, 0x30	; 48
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	0e 94 3c 05 	call	0xa78	; 0xa78 <fputc>
 9ca:	a2 fe       	sbrs	r10, 2
 9cc:	17 c0       	rjmp	.+46     	; 0x9fc <__stack+0xfd>
 9ce:	a1 fc       	sbrc	r10, 1
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <__stack+0xd9>
 9d2:	88 e7       	ldi	r24, 0x78	; 120
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <__stack+0xdd>
 9d8:	88 e5       	ldi	r24, 0x58	; 88
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	b6 01       	movw	r22, r12
 9de:	0c c0       	rjmp	.+24     	; 0x9f8 <__stack+0xf9>
 9e0:	8a 2d       	mov	r24, r10
 9e2:	86 78       	andi	r24, 0x86	; 134
 9e4:	59 f0       	breq	.+22     	; 0x9fc <__stack+0xfd>
 9e6:	a1 fe       	sbrs	r10, 1
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <__stack+0xef>
 9ea:	8b e2       	ldi	r24, 0x2B	; 43
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <__stack+0xf1>
 9ee:	80 e2       	ldi	r24, 0x20	; 32
 9f0:	a7 fc       	sbrc	r10, 7
 9f2:	8d e2       	ldi	r24, 0x2D	; 45
 9f4:	b6 01       	movw	r22, r12
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 3c 05 	call	0xa78	; 0xa78 <fputc>
 9fc:	89 14       	cp	r8, r9
 9fe:	38 f4       	brcc	.+14     	; 0xa0e <__stack+0x10f>
 a00:	b6 01       	movw	r22, r12
 a02:	80 e3       	ldi	r24, 0x30	; 48
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 3c 05 	call	0xa78	; 0xa78 <fputc>
 a0a:	9a 94       	dec	r9
 a0c:	f7 cf       	rjmp	.-18     	; 0x9fc <__stack+0xfd>
 a0e:	8a 94       	dec	r8
 a10:	f3 01       	movw	r30, r6
 a12:	e8 0d       	add	r30, r8
 a14:	f1 1d       	adc	r31, r1
 a16:	80 81       	ld	r24, Z
 a18:	b6 01       	movw	r22, r12
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 3c 05 	call	0xa78	; 0xa78 <fputc>
 a20:	81 10       	cpse	r8, r1
 a22:	f5 cf       	rjmp	.-22     	; 0xa0e <__stack+0x10f>
 a24:	22 20       	and	r2, r2
 a26:	09 f4       	brne	.+2      	; 0xa2a <__stack+0x12b>
 a28:	42 ce       	rjmp	.-892    	; 0x6ae <vfprintf+0x24>
 a2a:	b6 01       	movw	r22, r12
 a2c:	80 e2       	ldi	r24, 0x20	; 32
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 3c 05 	call	0xa78	; 0xa78 <fputc>
 a34:	2a 94       	dec	r2
 a36:	f6 cf       	rjmp	.-20     	; 0xa24 <__stack+0x125>
 a38:	f6 01       	movw	r30, r12
 a3a:	86 81       	ldd	r24, Z+6	; 0x06
 a3c:	97 81       	ldd	r25, Z+7	; 0x07
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__stack+0x145>
 a40:	8f ef       	ldi	r24, 0xFF	; 255
 a42:	9f ef       	ldi	r25, 0xFF	; 255
 a44:	2b 96       	adiw	r28, 0x0b	; 11
 a46:	e2 e1       	ldi	r30, 0x12	; 18
 a48:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__epilogue_restores__>

00000a4c <strnlen_P>:
 a4c:	fc 01       	movw	r30, r24
 a4e:	05 90       	lpm	r0, Z+
 a50:	61 50       	subi	r22, 0x01	; 1
 a52:	70 40       	sbci	r23, 0x00	; 0
 a54:	01 10       	cpse	r0, r1
 a56:	d8 f7       	brcc	.-10     	; 0xa4e <strnlen_P+0x2>
 a58:	80 95       	com	r24
 a5a:	90 95       	com	r25
 a5c:	8e 0f       	add	r24, r30
 a5e:	9f 1f       	adc	r25, r31
 a60:	08 95       	ret

00000a62 <strnlen>:
 a62:	fc 01       	movw	r30, r24
 a64:	61 50       	subi	r22, 0x01	; 1
 a66:	70 40       	sbci	r23, 0x00	; 0
 a68:	01 90       	ld	r0, Z+
 a6a:	01 10       	cpse	r0, r1
 a6c:	d8 f7       	brcc	.-10     	; 0xa64 <strnlen+0x2>
 a6e:	80 95       	com	r24
 a70:	90 95       	com	r25
 a72:	8e 0f       	add	r24, r30
 a74:	9f 1f       	adc	r25, r31
 a76:	08 95       	ret

00000a78 <fputc>:
 a78:	0f 93       	push	r16
 a7a:	1f 93       	push	r17
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
 a80:	fb 01       	movw	r30, r22
 a82:	23 81       	ldd	r18, Z+3	; 0x03
 a84:	21 fd       	sbrc	r18, 1
 a86:	03 c0       	rjmp	.+6      	; 0xa8e <fputc+0x16>
 a88:	8f ef       	ldi	r24, 0xFF	; 255
 a8a:	9f ef       	ldi	r25, 0xFF	; 255
 a8c:	2c c0       	rjmp	.+88     	; 0xae6 <fputc+0x6e>
 a8e:	22 ff       	sbrs	r18, 2
 a90:	16 c0       	rjmp	.+44     	; 0xabe <fputc+0x46>
 a92:	46 81       	ldd	r20, Z+6	; 0x06
 a94:	57 81       	ldd	r21, Z+7	; 0x07
 a96:	24 81       	ldd	r18, Z+4	; 0x04
 a98:	35 81       	ldd	r19, Z+5	; 0x05
 a9a:	42 17       	cp	r20, r18
 a9c:	53 07       	cpc	r21, r19
 a9e:	44 f4       	brge	.+16     	; 0xab0 <fputc+0x38>
 aa0:	a0 81       	ld	r26, Z
 aa2:	b1 81       	ldd	r27, Z+1	; 0x01
 aa4:	9d 01       	movw	r18, r26
 aa6:	2f 5f       	subi	r18, 0xFF	; 255
 aa8:	3f 4f       	sbci	r19, 0xFF	; 255
 aaa:	31 83       	std	Z+1, r19	; 0x01
 aac:	20 83       	st	Z, r18
 aae:	8c 93       	st	X, r24
 ab0:	26 81       	ldd	r18, Z+6	; 0x06
 ab2:	37 81       	ldd	r19, Z+7	; 0x07
 ab4:	2f 5f       	subi	r18, 0xFF	; 255
 ab6:	3f 4f       	sbci	r19, 0xFF	; 255
 ab8:	37 83       	std	Z+7, r19	; 0x07
 aba:	26 83       	std	Z+6, r18	; 0x06
 abc:	14 c0       	rjmp	.+40     	; 0xae6 <fputc+0x6e>
 abe:	8b 01       	movw	r16, r22
 ac0:	ec 01       	movw	r28, r24
 ac2:	fb 01       	movw	r30, r22
 ac4:	00 84       	ldd	r0, Z+8	; 0x08
 ac6:	f1 85       	ldd	r31, Z+9	; 0x09
 ac8:	e0 2d       	mov	r30, r0
 aca:	09 95       	icall
 acc:	89 2b       	or	r24, r25
 ace:	e1 f6       	brne	.-72     	; 0xa88 <fputc+0x10>
 ad0:	d8 01       	movw	r26, r16
 ad2:	16 96       	adiw	r26, 0x06	; 6
 ad4:	8d 91       	ld	r24, X+
 ad6:	9c 91       	ld	r25, X
 ad8:	17 97       	sbiw	r26, 0x07	; 7
 ada:	01 96       	adiw	r24, 0x01	; 1
 adc:	17 96       	adiw	r26, 0x07	; 7
 ade:	9c 93       	st	X, r25
 ae0:	8e 93       	st	-X, r24
 ae2:	16 97       	sbiw	r26, 0x06	; 6
 ae4:	ce 01       	movw	r24, r28
 ae6:	df 91       	pop	r29
 ae8:	cf 91       	pop	r28
 aea:	1f 91       	pop	r17
 aec:	0f 91       	pop	r16
 aee:	08 95       	ret

00000af0 <__ultoa_invert>:
 af0:	fa 01       	movw	r30, r20
 af2:	aa 27       	eor	r26, r26
 af4:	28 30       	cpi	r18, 0x08	; 8
 af6:	51 f1       	breq	.+84     	; 0xb4c <__ultoa_invert+0x5c>
 af8:	20 31       	cpi	r18, 0x10	; 16
 afa:	81 f1       	breq	.+96     	; 0xb5c <__ultoa_invert+0x6c>
 afc:	e8 94       	clt
 afe:	6f 93       	push	r22
 b00:	6e 7f       	andi	r22, 0xFE	; 254
 b02:	6e 5f       	subi	r22, 0xFE	; 254
 b04:	7f 4f       	sbci	r23, 0xFF	; 255
 b06:	8f 4f       	sbci	r24, 0xFF	; 255
 b08:	9f 4f       	sbci	r25, 0xFF	; 255
 b0a:	af 4f       	sbci	r26, 0xFF	; 255
 b0c:	b1 e0       	ldi	r27, 0x01	; 1
 b0e:	3e d0       	rcall	.+124    	; 0xb8c <__ultoa_invert+0x9c>
 b10:	b4 e0       	ldi	r27, 0x04	; 4
 b12:	3c d0       	rcall	.+120    	; 0xb8c <__ultoa_invert+0x9c>
 b14:	67 0f       	add	r22, r23
 b16:	78 1f       	adc	r23, r24
 b18:	89 1f       	adc	r24, r25
 b1a:	9a 1f       	adc	r25, r26
 b1c:	a1 1d       	adc	r26, r1
 b1e:	68 0f       	add	r22, r24
 b20:	79 1f       	adc	r23, r25
 b22:	8a 1f       	adc	r24, r26
 b24:	91 1d       	adc	r25, r1
 b26:	a1 1d       	adc	r26, r1
 b28:	6a 0f       	add	r22, r26
 b2a:	71 1d       	adc	r23, r1
 b2c:	81 1d       	adc	r24, r1
 b2e:	91 1d       	adc	r25, r1
 b30:	a1 1d       	adc	r26, r1
 b32:	20 d0       	rcall	.+64     	; 0xb74 <__ultoa_invert+0x84>
 b34:	09 f4       	brne	.+2      	; 0xb38 <__ultoa_invert+0x48>
 b36:	68 94       	set
 b38:	3f 91       	pop	r19
 b3a:	2a e0       	ldi	r18, 0x0A	; 10
 b3c:	26 9f       	mul	r18, r22
 b3e:	11 24       	eor	r1, r1
 b40:	30 19       	sub	r19, r0
 b42:	30 5d       	subi	r19, 0xD0	; 208
 b44:	31 93       	st	Z+, r19
 b46:	de f6       	brtc	.-74     	; 0xafe <__ultoa_invert+0xe>
 b48:	cf 01       	movw	r24, r30
 b4a:	08 95       	ret
 b4c:	46 2f       	mov	r20, r22
 b4e:	47 70       	andi	r20, 0x07	; 7
 b50:	40 5d       	subi	r20, 0xD0	; 208
 b52:	41 93       	st	Z+, r20
 b54:	b3 e0       	ldi	r27, 0x03	; 3
 b56:	0f d0       	rcall	.+30     	; 0xb76 <__ultoa_invert+0x86>
 b58:	c9 f7       	brne	.-14     	; 0xb4c <__ultoa_invert+0x5c>
 b5a:	f6 cf       	rjmp	.-20     	; 0xb48 <__ultoa_invert+0x58>
 b5c:	46 2f       	mov	r20, r22
 b5e:	4f 70       	andi	r20, 0x0F	; 15
 b60:	40 5d       	subi	r20, 0xD0	; 208
 b62:	4a 33       	cpi	r20, 0x3A	; 58
 b64:	18 f0       	brcs	.+6      	; 0xb6c <__ultoa_invert+0x7c>
 b66:	49 5d       	subi	r20, 0xD9	; 217
 b68:	31 fd       	sbrc	r19, 1
 b6a:	40 52       	subi	r20, 0x20	; 32
 b6c:	41 93       	st	Z+, r20
 b6e:	02 d0       	rcall	.+4      	; 0xb74 <__ultoa_invert+0x84>
 b70:	a9 f7       	brne	.-22     	; 0xb5c <__ultoa_invert+0x6c>
 b72:	ea cf       	rjmp	.-44     	; 0xb48 <__ultoa_invert+0x58>
 b74:	b4 e0       	ldi	r27, 0x04	; 4
 b76:	a6 95       	lsr	r26
 b78:	97 95       	ror	r25
 b7a:	87 95       	ror	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	ba 95       	dec	r27
 b82:	c9 f7       	brne	.-14     	; 0xb76 <__ultoa_invert+0x86>
 b84:	00 97       	sbiw	r24, 0x00	; 0
 b86:	61 05       	cpc	r22, r1
 b88:	71 05       	cpc	r23, r1
 b8a:	08 95       	ret
 b8c:	9b 01       	movw	r18, r22
 b8e:	ac 01       	movw	r20, r24
 b90:	0a 2e       	mov	r0, r26
 b92:	06 94       	lsr	r0
 b94:	57 95       	ror	r21
 b96:	47 95       	ror	r20
 b98:	37 95       	ror	r19
 b9a:	27 95       	ror	r18
 b9c:	ba 95       	dec	r27
 b9e:	c9 f7       	brne	.-14     	; 0xb92 <__ultoa_invert+0xa2>
 ba0:	62 0f       	add	r22, r18
 ba2:	73 1f       	adc	r23, r19
 ba4:	84 1f       	adc	r24, r20
 ba6:	95 1f       	adc	r25, r21
 ba8:	a0 1d       	adc	r26, r0
 baa:	08 95       	ret

00000bac <__prologue_saves__>:
 bac:	2f 92       	push	r2
 bae:	3f 92       	push	r3
 bb0:	4f 92       	push	r4
 bb2:	5f 92       	push	r5
 bb4:	6f 92       	push	r6
 bb6:	7f 92       	push	r7
 bb8:	8f 92       	push	r8
 bba:	9f 92       	push	r9
 bbc:	af 92       	push	r10
 bbe:	bf 92       	push	r11
 bc0:	cf 92       	push	r12
 bc2:	df 92       	push	r13
 bc4:	ef 92       	push	r14
 bc6:	ff 92       	push	r15
 bc8:	0f 93       	push	r16
 bca:	1f 93       	push	r17
 bcc:	cf 93       	push	r28
 bce:	df 93       	push	r29
 bd0:	cd b7       	in	r28, 0x3d	; 61
 bd2:	de b7       	in	r29, 0x3e	; 62
 bd4:	ca 1b       	sub	r28, r26
 bd6:	db 0b       	sbc	r29, r27
 bd8:	0f b6       	in	r0, 0x3f	; 63
 bda:	f8 94       	cli
 bdc:	de bf       	out	0x3e, r29	; 62
 bde:	0f be       	out	0x3f, r0	; 63
 be0:	cd bf       	out	0x3d, r28	; 61
 be2:	09 94       	ijmp

00000be4 <__epilogue_restores__>:
 be4:	2a 88       	ldd	r2, Y+18	; 0x12
 be6:	39 88       	ldd	r3, Y+17	; 0x11
 be8:	48 88       	ldd	r4, Y+16	; 0x10
 bea:	5f 84       	ldd	r5, Y+15	; 0x0f
 bec:	6e 84       	ldd	r6, Y+14	; 0x0e
 bee:	7d 84       	ldd	r7, Y+13	; 0x0d
 bf0:	8c 84       	ldd	r8, Y+12	; 0x0c
 bf2:	9b 84       	ldd	r9, Y+11	; 0x0b
 bf4:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf6:	b9 84       	ldd	r11, Y+9	; 0x09
 bf8:	c8 84       	ldd	r12, Y+8	; 0x08
 bfa:	df 80       	ldd	r13, Y+7	; 0x07
 bfc:	ee 80       	ldd	r14, Y+6	; 0x06
 bfe:	fd 80       	ldd	r15, Y+5	; 0x05
 c00:	0c 81       	ldd	r16, Y+4	; 0x04
 c02:	1b 81       	ldd	r17, Y+3	; 0x03
 c04:	aa 81       	ldd	r26, Y+2	; 0x02
 c06:	b9 81       	ldd	r27, Y+1	; 0x01
 c08:	ce 0f       	add	r28, r30
 c0a:	d1 1d       	adc	r29, r1
 c0c:	0f b6       	in	r0, 0x3f	; 63
 c0e:	f8 94       	cli
 c10:	de bf       	out	0x3e, r29	; 62
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	cd bf       	out	0x3d, r28	; 61
 c16:	ed 01       	movw	r28, r26
 c18:	08 95       	ret

00000c1a <_exit>:
 c1a:	f8 94       	cli

00000c1c <__stop_program>:
 c1c:	ff cf       	rjmp	.-2      	; 0xc1c <__stop_program>
