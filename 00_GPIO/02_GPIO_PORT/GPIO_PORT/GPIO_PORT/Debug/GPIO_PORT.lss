
GPIO_PORT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac8  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000731  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050b  00000000  00000000  000013e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fb  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036e  00000000  00000000  00001d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000020f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Ejemplo_pulsadores>:
	
	//BT1	PD0
	//BT2	PD5
	//BT3	PC0
	
	DDRB |= (1<<0)|(1<<1)|(1<<2); //pb0, pb1, pb2 salidas
  80:	84 b1       	in	r24, 0x04	; 4
  82:	87 60       	ori	r24, 0x07	; 7
  84:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1<<0) & ~(1<<5); //pd0 y pd5 entradas
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	8e 7d       	andi	r24, 0xDE	; 222
  8a:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1<<0); //pc0 entrada
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	8e 7f       	andi	r24, 0xFE	; 254
  90:	87 b9       	out	0x07, r24	; 7
	
	
	for(;;){
		
		if((PINC & (1<<0))==0){  //if((PINC & (1<<0))!=1)
  92:	30 99       	sbic	0x06, 0	; 6
  94:	04 c0       	rjmp	.+8      	; 0x9e <Ejemplo_pulsadores+0x1e>
			
			PORTB |= (1<<0);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <Ejemplo_pulsadores+0x24>
			
			}else{
			PORTB &= ~(1<<0);
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	85 b9       	out	0x05, r24	; 5
		}
		
		if(!(PIND & (1<<0))){ //if((PIND & (1<<0))==0)
  a4:	48 99       	sbic	0x09, 0	; 9
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <Ejemplo_pulsadores+0x30>
			
			PORTB |= (1<<1);
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	85 b9       	out	0x05, r24	; 5
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <Ejemplo_pulsadores+0x36>
			
			}else{
			PORTB &= ~(1<<1);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	85 b9       	out	0x05, r24	; 5
		}
		
		if((PIND & (1<<5))){  //if((PIND & (1<<5))!=0)
  b6:	4d 9b       	sbis	0x09, 5	; 9
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <Ejemplo_pulsadores+0x42>
			
			PORTB |= (1<<2);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	85 b9       	out	0x05, r24	; 5
  c0:	e8 cf       	rjmp	.-48     	; 0x92 <Ejemplo_pulsadores+0x12>
			
			}else{
			
			PORTB &= ~(1<<2);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	e4 cf       	rjmp	.-56     	; 0x92 <Ejemplo_pulsadores+0x12>

000000ca <main>:
void Ejemplo6(void);
void Ejemplo_pulsadores(void);

int main(void)
{
	Ejemplo_pulsadores();
  ca:	0e 94 40 00 	call	0x80	; 0x80 <Ejemplo_pulsadores>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
