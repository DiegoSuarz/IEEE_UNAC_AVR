
INTERRUPT_PCINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000840  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072e  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000431  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000134  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_2>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  88:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
EICRA &= ~(1<<ISC10); //INT1 se activa por flanco de bajada

EIMSK |= (1<<INT1); //habilitamos la interrupcion externa 1 (INT1)
}

ISR(INT0_vect){  //servicio de rutina de interrupcion, apuntar al vector de interrupcion INT0
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25

PORTB ^= (1<<0);
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	85 b9       	out	0x05, r24	; 5
EIFR |= (1<<INTF0); //limpiamos la bandera de interrupcion INT0
  a6:	8c b3       	in	r24, 0x1c	; 28
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8c bb       	out	0x1c, r24	; 28
}
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_2>:

ISR(INT1_vect){  //servicio de rutina de interrupcion, apuntar al vector de interrupcion INT1
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25

PORTB ^= (1<<5);
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	80 e2       	ldi	r24, 0x20	; 32
  cc:	89 27       	eor	r24, r25
  ce:	85 b9       	out	0x05, r24	; 5
EIFR |= (1<<INTF1); //limpiamos la bandera de interrupcion INT1
  d0:	8c b3       	in	r24, 0x1c	; 28
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	8c bb       	out	0x1c, r24	; 28
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <PCINTx_Init>:
/************************************************************************/
/* Interrupcion por cambio de estado PCINT                                                                     */
/************************************************************************/

void PCINTx_Init(void){
	PCICR |= (1<<PCIE0); //habilitamos interrupcion PCINT0-PCINT7
  e4:	e8 e6       	ldi	r30, 0x68	; 104
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
	
	PCMSK0 |= (1<<PCINT7); //seleccionamos la mascara para PCINT7 (solo se activa esa interrupcion)
  ee:	eb e6       	ldi	r30, 0x6B	; 107
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <__vector_3>:

}

ISR(PCINT0_vect){  //servicio de rutina de interrupcion, apuntar al vector de interrupcion PCINT0( pcint0-pcint7)
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24

	Flag_PCINT7=true;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//PORTB ^= (1<<5);
	PCIFR |= (1<<PCIF0); //limpiamos la bandera de interrupcion INT1
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	8b bb       	out	0x1b, r24	; 27
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:

volatile bool Flag_PCINT7 = false;

int main(void)
{
	cli(); //deshabilita todas las interrupciones globales
 11e:	f8 94       	cli
    PCINTx_Init();
 120:	0e 94 72 00 	call	0xe4	; 0xe4 <PCINTx_Init>
	sei(); //habilita todas las interrupciones globales
 124:	78 94       	sei
    while (1) 
    {
		if(Flag_PCINT7){
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	88 23       	and	r24, r24
 12c:	e1 f3       	breq	.-8      	; 0x126 <main+0x8>
 12e:	0f c0       	rjmp	.+30     	; 0x14e <main+0x30>
			for(uint8_t i=0;i<9;i++){
				PORTB ^= (1<<5);
 130:	25 b1       	in	r18, 0x05	; 5
 132:	80 e2       	ldi	r24, 0x20	; 32
 134:	82 27       	eor	r24, r18
 136:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	32 e5       	ldi	r19, 0x52	; 82
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	30 40       	sbci	r19, 0x00	; 0
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x20>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x2a>
 148:	00 00       	nop
    PCINTx_Init();
	sei(); //habilita todas las interrupciones globales
    while (1) 
    {
		if(Flag_PCINT7){
			for(uint8_t i=0;i<9;i++){
 14a:	9f 5f       	subi	r25, 0xFF	; 255
 14c:	01 c0       	rjmp	.+2      	; 0x150 <main+0x32>
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	99 30       	cpi	r25, 0x09	; 9
 152:	70 f3       	brcs	.-36     	; 0x130 <main+0x12>
				PORTB ^= (1<<5);
				_delay_ms(300);
			}
			Flag_PCINT7=false;
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	e6 cf       	rjmp	.-52     	; 0x126 <main+0x8>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
