
INTERRUPT_EXTERNA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000746  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000311  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ba  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_1>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <INTx_Init>:

void INTx_Init(void){
	/************************************************************************/
	/* INT0 flanco de subida                                                                */
	/************************************************************************/
	EICRA |= (1<<ISC01)|(1<<ISC00); //INT0 se activa por es flanco de subida
  80:	e9 e6       	ldi	r30, 0x69	; 105
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	83 60       	ori	r24, 0x03	; 3
  88:	80 83       	st	Z, r24
	
	EIMSK |= (1<<INT0); //habilitamos la interrupcion externa 0 (INT0)
  8a:	8d b3       	in	r24, 0x1d	; 29
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	8d bb       	out	0x1d, r24	; 29
	
	
	/************************************************************************/
	/* INT1 flanco de bajada                                                                     */
	/************************************************************************/
	EICRA |= (1<<ISC11); 
  90:	80 81       	ld	r24, Z
  92:	88 60       	ori	r24, 0x08	; 8
  94:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC10); //INT1 se activa por flanco de bajada
  96:	80 81       	ld	r24, Z
  98:	8b 7f       	andi	r24, 0xFB	; 251
  9a:	80 83       	st	Z, r24
	
	EIMSK |= (1<<INT1); //habilitamos la interrupcion externa 1 (INT1)
  9c:	8d b3       	in	r24, 0x1d	; 29
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	8d bb       	out	0x1d, r24	; 29
  a2:	08 95       	ret

000000a4 <__vector_1>:
}

ISR(INT0_vect){  //servicio de rutina de interrupcion, apuntar al vector de interrupcion INT0
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	
	PORTB ^= (1<<0);
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	89 27       	eor	r24, r25
  b8:	85 b9       	out	0x05, r24	; 5
	EIFR |= (1<<INTF0); //limpiamos la bandera de interrupcion INT0
  ba:	8c b3       	in	r24, 0x1c	; 28
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8c bb       	out	0x1c, r24	; 28
}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_2>:

ISR(INT1_vect){  //servicio de rutina de interrupcion, apuntar al vector de interrupcion INT1
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	
	PORTB ^= (1<<5);
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	89 27       	eor	r24, r25
  e2:	85 b9       	out	0x05, r24	; 5
	EIFR |= (1<<INTF1); //limpiamos la bandera de interrupcion INT1
  e4:	8c b3       	in	r24, 0x1c	; 28
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	8c bb       	out	0x1c, r24	; 28
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:
#include "Interrupts.h"


int main(void)
{
	INTx_Init();
  f8:	0e 94 40 00 	call	0x80	; 0x80 <INTx_Init>
	DDRB |= (1<<5) | (1<<0);
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	81 62       	ori	r24, 0x21	; 33
 100:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<5) & ~(1<<0);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8e 7d       	andi	r24, 0xDE	; 222
 106:	85 b9       	out	0x05, r24	; 5
	sei(); //set interrupt, habilita las interrupciones globales
 108:	78 94       	sei
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x12>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
